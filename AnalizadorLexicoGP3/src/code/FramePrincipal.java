/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package code;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StringReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.Symbol;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author walyn
 */
public class FramePrincipal extends javax.swing.JFrame {
    DefaultTableModel modelo;
Sintax uno = new Sintax();
    NumeroLinea numeroLinea;
    
    public void DeclaracionVariables(){
    }

    public FramePrincipal() {
        initComponents();
        setLocationRelativeTo(null);
        numeroLinea = new NumeroLinea(txtIn);
        jScrollPane3.setRowHeaderView(numeroLinea);
        //Propiedades de la Tabla
        modelo = new DefaultTableModel();
        modelo.addColumn("Componente Lexico");
        modelo.addColumn("Lexema");
        modelo.addColumn("Linea");
        modelo.addColumn("Columna");
        this.tabla.setModel(modelo);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnAbrir = new javax.swing.JButton();
        btnAnalizar = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtIn = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        creditos = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtSin = new javax.swing.JTextArea();
        btnSin = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtSym = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ANALIZADOR LEXICO GP3");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jPanel1.setBackground(new java.awt.Color(255, 204, 0));
        jPanel1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        btnAbrir.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        btnAbrir.setText("Abrir Archivo");
        btnAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirActionPerformed(evt);
            }
        });

        btnAnalizar.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        btnAnalizar.setText("Analizar");
        btnAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarActionPerformed(evt);
            }
        });

        txtIn.setColumns(20);
        txtIn.setRows(5);
        jScrollPane3.setViewportView(txtIn);

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/code/Javascript.png"))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Franklin Gothic Demi Cond", 1, 36)); // NOI18N
        jLabel2.setText("Analizador Lexico ");

        btnClear.setFont(new java.awt.Font("Gill Sans MT", 3, 14)); // NOI18N
        btnClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/code/escobita.png"))); // NOI18N
        btnClear.setText("Limpiar");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tabla);

        creditos.setFont(new java.awt.Font("Bookman Old Style", 3, 12)); // NOI18N
        creditos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/code/About.png"))); // NOI18N
        creditos.setText("Creditos");
        creditos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                creditosActionPerformed(evt);
            }
        });

        txtSin.setColumns(20);
        txtSin.setRows(5);
        jScrollPane1.setViewportView(txtSin);

        btnSin.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        btnSin.setText("Analizar");
        btnSin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSinActionPerformed(evt);
            }
        });

        txtSym.setColumns(20);
        txtSym.setRows(5);
        jScrollPane4.setViewportView(txtSym);

        jLabel5.setFont(new java.awt.Font("Franklin Gothic Demi Cond", 1, 36)); // NOI18N
        jLabel5.setText("R e s u l t a d o");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnAbrir)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAnalizar))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 6, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(btnSin)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addComponent(creditos)
                                .addGap(29, 29, 29)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel2)
                                .addComponent(btnAbrir))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAnalizar)
                            .addComponent(jLabel5))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(creditos)
                                    .addComponent(btnSin, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(btnClear)))
                        .addGap(0, 21, Short.MAX_VALUE))
                    .addComponent(jScrollPane4))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarActionPerformed
        int fila = tabla.getRowCount();
        for (int i = fila - 1; i >= 0; i--) {
            modelo.removeRow(i);
        }
        if (txtIn.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Ingrese Algo Para Evaluar");

        } else {
            File archivo = new File("archivo.txt");
            PrintWriter escribir;

            try {
                escribir = new PrintWriter(archivo);
                escribir.print(txtIn.getText());
                escribir.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(FramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }

            try {
                Reader lector = new BufferedReader(new FileReader("archivo.txt"));
                Lexer lexer = new Lexer(lector);
                String Resultado = "";
                String[] info = new String[4];
                while (true) {
                    Tokens tokens = lexer.yylex();
                    if (tokens == null) {
                        JOptionPane.showMessageDialog(null, "Analisis Finaliado");
                        return;
                    }
                    switch (tokens) {
                        case Palabra_Reservada:
                            Resultado += lexer.lexeme + "      ---> Es " + tokens + "  Linea: " + (lexer.linea + 1) + " Columna: " + (lexer.columna + 1) + "\n";

                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            break;
                        case Operador_Suma:
                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            Resultado += lexer.lexeme + "      ---> Es " + tokens + "  Linea: " + (lexer.linea + 1) + " Columna: " + (lexer.columna + 1) + "\n";
                            break;
                        case Comentario:
                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            Resultado += lexer.lexeme + "      ---> Es " + tokens + "  Linea: " + (lexer.linea + 1) + " Columna: " + (lexer.columna + 1) + "\n";
                            break;
                        case Incremento:
                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            Resultado += lexer.lexeme + "      ---> Es " + tokens + "  Linea: " + (lexer.linea + 1) + " Columna: " + (lexer.columna + 1) + "\n";
                            break;
                        case Operador_Resta:
                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            Resultado += lexer.lexeme + "      ---> Es " + tokens + "  Linea: " + (lexer.linea + 1) + " Columna: " + (lexer.columna + 1) + "\n";
                            break;
                        case Operador_Multiplicacion:
                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            Resultado += lexer.lexeme + "      ---> Es " + tokens + "  Linea: " + (lexer.linea + 1) + " Columna: " + (lexer.columna + 1) + "\n";
                            break;
                        case Operador_Division:
                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            Resultado += lexer.lexeme + "      ---> Es " + tokens + "  Linea: " + (lexer.linea + 1) + " Columna: " + (lexer.columna + 1) + "\n";
                            break;
                        case Identificador:
                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            Resultado += lexer.lexeme + "      ---> Es " + tokens + "  Linea: " + (lexer.linea + 1) + " Columna: " + (lexer.columna + 1) + "\n";
                            break;
                        case Error:
                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            Resultado += "Simbolo No Definido" + "  Linea: " + (lexer.linea + 1) + " Columna: " + (lexer.columna + 1) + "\n";
                            break;
                        case Corchete_Apertura:
                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            Resultado += lexer.lexeme + "      ---> Es " + tokens + "  Linea: " + (lexer.linea + 1) + " Columna: " + (lexer.columna + 1) + "\n";
                            break;
                        case Corchete_Cierre:
                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            Resultado += lexer.lexeme + "      ---> Es " + tokens + "  Linea: " + (lexer.linea + 1) + " Columna: " + (lexer.columna + 1) + "\n";
                            break;
                        case LLave_Apertura:
                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            Resultado += lexer.lexeme + "      ---> Es " + tokens + "  Linea: " + (lexer.linea + 1) + " Columna: " + (lexer.columna + 1) + "\n";
                            break;
                        case LLave_Cierre:
                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            Resultado += lexer.lexeme + "      ---> Es " + tokens + "  Linea: " + (lexer.linea + 1) + " Columna: " + (lexer.columna + 1) + "\n";
                            break;

                        case Numero:
                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            Resultado += lexer.lexeme + "      ---> Es " + tokens + "  Linea: " + (lexer.linea + 1) + " Columna: " + (lexer.columna + 1) + "\n";
                            break;

                        case Entero_Real:
                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            Resultado += lexer.lexeme + "      ---> Es " + tokens + "  Linea: " + (lexer.linea + 1) + " Columna: " + (lexer.columna + 1) + "\n";
                            break;
                        case Decimal_Real:
                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            Resultado += lexer.lexeme + "      ---> Es " + tokens + "  Linea: " + (lexer.linea + 1) + " Columna: " + (lexer.columna + 1) + "\n";
                            break;
                        case Operador_Logico:
                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            Resultado += lexer.lexeme + "      ---> Es " + tokens + "  Linea: " + (lexer.linea + 1) + " Columna: " + (lexer.columna + 1) + "\n";
                            break;
                        case Operador_Asignacion:
                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            Resultado += lexer.lexeme + "      ---> Es " + tokens + "  Linea: " + (lexer.linea + 1) + " Columna: " + (lexer.columna + 1) + "\n";
                            break;
                        case Terminador:
                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            Resultado += lexer.lexeme + "      ---> Es " + tokens + "  Linea: " + (lexer.linea + 1) + " Columna: " + (lexer.columna + 1) + "\n";
                            break;
                        case Parentesis_Apertura:
                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            Resultado += lexer.lexeme + "      ---> Es " + tokens + "  Linea: " + (lexer.linea + 1) + " Columna: " + (lexer.columna + 1) + "\n";
                            break;
                        case Parentesis_Cierre:
                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            Resultado += lexer.lexeme + "      ---> Es " + tokens + "  Linea: " + (lexer.linea + 1) + " Columna: " + (lexer.columna + 1) + "\n";
                            break;
                        case Simbolo:
                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            Resultado += lexer.lexeme + "      ---> Es " + tokens + "  Linea: " + (lexer.linea + 1) + " Columna: " + (lexer.columna + 1) + "\n";
                            break;
                        case Comparador:
                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            Resultado += lexer.lexeme + "      ---> Es " + tokens + "  Linea: " + (lexer.linea + 1) + " Columna: " + (lexer.columna + 1) + "\n";
                            break;
                        case Cadena:
                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            Resultado += lexer.lexeme + "      ---> Es " + tokens + "  Linea: " + (lexer.linea + 1) + " Columna: " + (lexer.columna + 1) + "\n";
                            break;
                        case Coma:
                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            Resultado += lexer.lexeme + "      ---> Es " + tokens + "  Linea: " + (lexer.linea + 1) + " Columna: " + (lexer.columna + 1) + "\n";
                            break;
                        case Decremento:
                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            Resultado += lexer.lexeme + "      ---> Es " + tokens + "  Linea: " + (lexer.linea + 1) + " Columna: " + (lexer.columna + 1) + "\n";
                            break;
                        case Boleano:
                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            Resultado += lexer.lexeme + "      ---> Es " + tokens + "  Linea: " + (lexer.linea + 1) + " Columna: " + (lexer.columna + 1) + "\n";
                            break;
                        case Operador_Residuo:
                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            Resultado += lexer.lexeme + "      ---> Es " + tokens + "  Linea: " + (lexer.linea + 1) + " Columna: " + (lexer.columna + 1) + "\n";
                            break;
                        case Potencia:
                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            Resultado += lexer.lexeme + "      ---> Es " + tokens + "  Linea: " + (lexer.linea + 1) + " Columna: " + (lexer.columna + 1) + "\n";
                            break;
                        case Vacio:
                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            Resultado += lexer.lexeme + "      ---> Es " + tokens + "  Linea: " + (lexer.linea + 1) + " Columna: " + (lexer.columna + 1) + "\n";
                            break;
                        case ClaveReservada:
                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            Resultado += lexer.lexeme + "      ---> Es " + tokens + "  Linea: " + (lexer.linea + 1) + " Columna: " + (lexer.columna + 1) + "\n";
                            break;
                        case NotacionCientifica:
                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            Resultado += lexer.lexeme + "      ---> Es " + tokens + "  Linea: " + (lexer.linea + 1) + " Columna: " + (lexer.columna + 1) + "\n";
                            break;
                        case Letra:
                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            Resultado += lexer.lexeme + "      ---> Es " + tokens + "  Linea: " + (lexer.linea + 1) + " Columna: " + (lexer.columna + 1) + "\n";
                            break;
                        case Var:
                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            Resultado += lexer.lexeme + "      ---> Es " + tokens + "  Linea: " + (lexer.linea + 1) + " Columna: " + (lexer.columna + 1) + "\n";
                            break;
                        case Return:
                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            Resultado += lexer.lexeme + "      ---> Es " + tokens + "  Linea: " + (lexer.linea + 1) + " Columna: " + (lexer.columna + 1) + "\n";
                            break;
                        case If:
                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            Resultado += lexer.lexeme + "      ---> Es " + tokens + "  Linea: " + (lexer.linea + 1) + " Columna: " + (lexer.columna + 1) + "\n";
                            break;
                        case Else:
                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            Resultado += lexer.lexeme + "      ---> Es " + tokens + "  Linea: " + (lexer.linea + 1) + " Columna: " + (lexer.columna + 1) + "\n";
                            break;
                        case While:
                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            Resultado += lexer.lexeme + "      ---> Es " + tokens + "  Linea: " + (lexer.linea + 1) + " Columna: " + (lexer.columna + 1) + "\n";
                            break;
                        case Function:
                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            Resultado += lexer.lexeme + "      ---> Es " + tokens + "  Linea: " + (lexer.linea + 1) + " Columna: " + (lexer.columna + 1) + "\n";
                            break;

                        default:
                            info[0] = lexer.lexeme;
                            info[1] = String.valueOf(tokens);
                            info[2] = String.valueOf((lexer.linea + 1));
                            info[3] = String.valueOf((lexer.columna + 1));
                            modelo.addRow(info);
                            Resultado += "Token Analizado: " + tokens + "\n";
                            break;
                    }
                }

            } catch (FileNotFoundException ex) {
                Logger.getLogger(FramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(FramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }


    }//GEN-LAST:event_btnAnalizarActionPerformed

    private void btnAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.showOpenDialog(null);
        File archivo = chooser.getSelectedFile();
        try {
            FileReader fr = new FileReader(archivo);
            BufferedReader br = new BufferedReader(fr);
            String texto = "";
            String linea = "";
            while (((linea = br.readLine()) != null)) {
                texto += linea + "\n";

            }
            txtIn.setText(texto);
            JOptionPane.showMessageDialog(null, "Archivo Exportado con Exito!");

        } catch (IOException ex) {
            Logger.getLogger(FramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btnAbrirActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        txtIn.setText("");
        txtSin.setText("");
        int fila = tabla.getRowCount();
        for (int i = fila - 1; i >= 0; i--) {
            modelo.removeRow(i);
        }
    }//GEN-LAST:event_btnClearActionPerformed

    private void creditosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_creditosActionPerformed
        creditos cre = new creditos();
        cre.setVisible(true);
    }//GEN-LAST:event_creditosActionPerformed

    private void btnSinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSinActionPerformed
       
       
        txtSin.setText("");
        String ST = txtIn.getText();
        Sintax s = new Sintax(new code.LexerCup(new StringReader(ST)));
        
        try {
            s.parse();
            txtSin.setText("Analisis Realizado Con Exito");
            txtSin.setForeground(new Color(25,111,61));
        } catch (Exception ex) {
            Symbol Sym = s.getS();
            txtSin.setText("Error de Sintaxis Linea: "+(Sym.right+1)+" Columna: "+(Sym.left+1)+", Cerca de: \" "+Sym.value+" \" ");
            txtSin.setForeground(Color.red);
        }

    }//GEN-LAST:event_btnSinActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FramePrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FramePrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FramePrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FramePrincipal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FramePrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAbrir;
    private javax.swing.JButton btnAnalizar;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnSin;
    private javax.swing.JButton creditos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable tabla;
    private javax.swing.JTextArea txtIn;
    private javax.swing.JTextArea txtSin;
    public javax.swing.JTextArea txtSym;
    // End of variables declaration//GEN-END:variables
}
