/* The following code was generated by JFlex 1.4.3 on 20/04/22 00:19 */

package code;
import static code.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 20/04/22 00:19 from the specification file
 * <tt>C:/Users/walyn/OneDrive/Documentos/NetBeansProjects/AnalizadorLexicoGP3/src/code/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\53\1\47\2\0\1\5\22\0\1\6\1\0\1\55\3\3"+
    "\1\51\1\54\1\42\1\43\1\36\1\34\1\6\1\35\1\3\1\37"+
    "\12\2\1\3\1\46\1\50\1\33\1\50\2\0\32\1\1\44\1\0"+
    "\1\45\1\0\1\4\1\0\1\12\1\7\1\14\1\24\1\11\1\25"+
    "\1\1\1\17\1\22\1\1\1\13\1\26\1\1\1\21\1\20\1\31"+
    "\1\1\1\10\1\15\1\16\1\23\1\32\1\30\1\1\1\27\1\1"+
    "\1\40\1\52\1\41\123\0\1\1\37\0\1\1\uff0e\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\2\2\5\14\2"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\2\4\2\1\1\0"+
    "\1\1\1\0\1\2\1\5\12\2\2\23\7\2\1\22"+
    "\1\24\1\3\1\25\2\0\1\26\2\0\1\27\2\1"+
    "\1\2\1\5\21\2\1\0\1\30\1\31\1\1\1\2"+
    "\1\5\11\2\1\0\1\1\1\2\1\5\7\2\1\30"+
    "\1\1\1\2\1\5\4\2\1\1\1\2\1\5\1\1"+
    "\1\2\1\5\1\1\1\2\1\5\1\1\1\2\1\5"+
    "\1\1\1\2\1\5\1\1\1\2\1\5\1\1\1\2"+
    "\1\5\1\1\1\2\1\5\1\1\1\2\1\5\1\1"+
    "\1\2\1\5\1\1\1\2\1\5\1\1\1\2\1\5"+
    "\1\1\1\2\1\5\1\1\1\2\1\5\1\1\1\2"+
    "\1\5\1\1\1\2\1\5\1\1\1\2\1\5\1\1"+
    "\1\2\1\5\1\1\1\2\1\5\1\1\1\2\1\5"+
    "\1\1\1\2\1\5\1\1\1\2\1\5\1\1\1\2"+
    "\1\5\1\1\1\2\1\5\1\1\1\2\1\5\1\1"+
    "\1\2\1\5\1\1\1\2\1\5\1\1\1\2\1\5"+
    "\1\1\1\2\1\5\1\1\1\2\1\5\1\1\1\2"+
    "\1\5\1\1\1\2\1\5\1\1\1\2\1\5\1\1"+
    "\1\2\1\5\1\1\1\2\1\5\1\1\1\2\1\5"+
    "\1\1\1\2\1\5\1\1\1\2\1\5\1\1\1\2"+
    "\1\5\1\1\1\2\1\5\1\1\1\2\1\5\1\1"+
    "\1\2\1\5\1\1\1\2\1\5\1\1\1\2\1\5"+
    "\1\1\1\2\1\5\1\1\1\2\1\5\1\1\1\2"+
    "\1\5\1\1\1\2\1\5\1\1\1\2\1\5\1\1"+
    "\1\2\1\5\1\1\1\2\1\5\1\1\1\2\1\5"+
    "\1\1\1\2\1\5\1\1\1\2\1\5\1\1\1\2"+
    "\1\5\1\1\1\2\1\5\1\1\1\2\1\5\1\1"+
    "\1\2\1\5\1\1\1\2\1\5\1\1\1\2\1\5"+
    "\1\1\1\2\1\5\1\1\1\2\1\5\1\1\1\2"+
    "\1\5\1\1\1\2\1\5\1\1\1\2\1\5\1\1"+
    "\1\2\1\5\1\1\1\2\1\5\1\1\1\2\1\5"+
    "\1\1\1\2\1\5\1\1\1\2\1\5\1\1\1\2"+
    "\1\5\1\1\1\2\1\5\1\1\1\2\1\5\1\1"+
    "\1\2\1\5\1\1\1\2\1\5\1\1\1\2\1\5"+
    "\1\1\1\2\1\5\1\1\1\2\1\5\1\1\1\2"+
    "\1\5\1\1\1\2\1\5\1\1\1\2\1\5\1\1"+
    "\1\2\1\5\1\1\1\2\1\5\1\1\1\2\1\5"+
    "\1\1\1\2\1\5\1\1\1\2\1\5\1\1\1\2"+
    "\1\5\1\1\1\2\1\5\1\1\1\2\1\5\1\1"+
    "\1\2\1\5\1\1\1\2\1\5\1\1\1\2\1\5"+
    "\1\1\1\2\1\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[405];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0284\0\u02b2"+
    "\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398\0\u03c6\0\u03f4\0\56"+
    "\0\u0422\0\56\0\56\0\270\0\270\0\56\0\56\0\270"+
    "\0\u0398\0\u0450\0\u047e\0\u04ac\0\u04da\0\u0508\0\u0536\0\u0564"+
    "\0\u0592\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u0678\0\u06a6\0\u06d4"+
    "\0\u0702\0\u0730\0\u075e\0\u078c\0\u07ba\0\134\0\u07e8\0\u0816"+
    "\0\u0844\0\u0872\0\u08a0\0\u08ce\0\u08fc\0\u0564\0\u0564\0\u092a"+
    "\0\u0564\0\u0958\0\u0986\0\u0564\0\u09b4\0\u09e2\0\u0508\0\u0a10"+
    "\0\u0a3e\0\u0a6c\0\u0a9a\0\u0ac8\0\u0af6\0\u0b24\0\u0b52\0\u0b80"+
    "\0\u0bae\0\u0bdc\0\u0c0a\0\u0c38\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0"+
    "\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6\0\u0986\0\56\0\u0e04"+
    "\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc\0\u0eea\0\u0f18\0\u0f46\0\u0f74"+
    "\0\u0fa2\0\u0fd0\0\u0ffe\0\u102c\0\u105a\0\u1088\0\u10b6\0\u10e4"+
    "\0\u1112\0\u1140\0\u116e\0\u119c\0\u11ca\0\u11f8\0\56\0\u1226"+
    "\0\u1254\0\u1282\0\u12b0\0\u12de\0\u130c\0\u133a\0\u1368\0\u1396"+
    "\0\u13c4\0\u13f2\0\u1420\0\u144e\0\u147c\0\u14aa\0\u14d8\0\u1506"+
    "\0\u1534\0\u1562\0\u1590\0\u15be\0\u15ec\0\u161a\0\u1648\0\u1676"+
    "\0\u16a4\0\u16d2\0\u1700\0\u172e\0\u175c\0\u178a\0\u17b8\0\u17e6"+
    "\0\u1814\0\u1842\0\u1870\0\u189e\0\u18cc\0\u18fa\0\u1928\0\u1956"+
    "\0\u1984\0\u19b2\0\u19e0\0\u1a0e\0\u1a3c\0\u1a6a\0\u1a98\0\u1ac6"+
    "\0\u1af4\0\u1b22\0\u1b50\0\u1b7e\0\u1bac\0\u1bda\0\u1c08\0\u1c36"+
    "\0\u1c64\0\u1c92\0\u1cc0\0\u1cee\0\u1d1c\0\u1d4a\0\u1d78\0\u1da6"+
    "\0\u1dd4\0\u1e02\0\u1e30\0\u1e5e\0\u1e8c\0\u1eba\0\u1ee8\0\u1f16"+
    "\0\u1f44\0\u1f72\0\u1fa0\0\u1fce\0\u1ffc\0\u202a\0\u2058\0\u2086"+
    "\0\u20b4\0\u20e2\0\u2110\0\u213e\0\u216c\0\u219a\0\u21c8\0\u21f6"+
    "\0\u2224\0\u2252\0\u2280\0\u22ae\0\u22dc\0\u230a\0\u2338\0\u2366"+
    "\0\u2394\0\u23c2\0\u23f0\0\u241e\0\u244c\0\u247a\0\u24a8\0\u24d6"+
    "\0\u2504\0\u2532\0\u2560\0\u258e\0\u25bc\0\u25ea\0\u2618\0\u2646"+
    "\0\u2674\0\u26a2\0\u26d0\0\u26fe\0\u272c\0\u275a\0\u2788\0\u27b6"+
    "\0\u27e4\0\u2812\0\u2840\0\u286e\0\u289c\0\u28ca\0\u28f8\0\u2926"+
    "\0\u2954\0\u2982\0\u29b0\0\u29de\0\u2a0c\0\u2a3a\0\u2a68\0\u2a96"+
    "\0\u2ac4\0\u2af2\0\u2b20\0\u2b4e\0\u2b7c\0\u2baa\0\u2bd8\0\u2c06"+
    "\0\u2c34\0\u2c62\0\u2c90\0\u2cbe\0\u2cec\0\u2d1a\0\u2d48\0\u2d76"+
    "\0\u2da4\0\u2dd2\0\u2e00\0\u2e2e\0\u2e5c\0\u2e8a\0\u2eb8\0\u2ee6"+
    "\0\u2f14\0\u2f42\0\u2f70\0\u2f9e\0\u2fcc\0\u2ffa\0\u3028\0\u3056"+
    "\0\u3084\0\u30b2\0\u30e0\0\u310e\0\u313c\0\u316a\0\u3198\0\u31c6"+
    "\0\u31f4\0\u3222\0\u3250\0\u327e\0\u32ac\0\u32da\0\u3308\0\u3336"+
    "\0\u3364\0\u3392\0\u33c0\0\u33ee\0\u341c\0\u344a\0\u3478\0\u34a6"+
    "\0\u34d4\0\u3502\0\u3530\0\u355e\0\u358c\0\u35ba\0\u35e8\0\u3616"+
    "\0\u3644\0\u3672\0\u36a0\0\u36ce\0\u36fc\0\u372a\0\u3758\0\u3786"+
    "\0\u37b4\0\u37e2\0\u3810\0\u383e\0\u386c\0\u389a\0\u38c8\0\u38f6"+
    "\0\u3924\0\u3952\0\u3980\0\u39ae\0\u39dc\0\u3a0a\0\u3a38\0\u3a66"+
    "\0\u3a94\0\u3ac2\0\u3af0\0\u3b1e\0\u3b4c\0\u3b7a\0\u3ba8\0\u3bd6"+
    "\0\u3c04\0\u3c32\0\u3c60\0\u3c8e\0\u3cbc\0\u3cea\0\u3d18\0\u3d46"+
    "\0\u3d74\0\u3da2\0\u3dd0\0\u3dfe\0\u3e2c\0\u3e5a\0\u3e88\0\u3eb6"+
    "\0\u3ee4\0\u3f12\0\u3f40\0\u3f6e\0\u3f9c\0\u3fca\0\u3ff8\0\u4026"+
    "\0\u4054\0\u4082\0\u40b0\0\u40de\0\u410c\0\u413a\0\u4168\0\u4196"+
    "\0\u41c4\0\u41f2\0\u4220\0\u424e\0\u427c\0\u42aa\0\u42d8\0\u4306"+
    "\0\u4334\0\u4362\0\u4390\0\u43be\0\u43ec\0\u441a\0\u4448\0\u4476"+
    "\0\u44a4\0\u44d2\0\u4500\0\u452e\0\u455c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[405];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\2\3\1\14\1\15\1\16\2\3\1\17"+
    "\1\20\1\3\1\21\1\22\2\3\1\23\1\3\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\7\1\41\1\42\1\43"+
    "\1\7\1\44\1\45\57\0\2\3\1\0\1\3\2\0"+
    "\24\3\23\0\1\46\1\47\1\4\1\46\1\47\2\46"+
    "\24\47\14\46\1\0\6\46\3\0\2\50\1\0\1\50"+
    "\24\0\3\50\1\0\1\50\2\0\2\50\2\0\1\50"+
    "\1\0\3\50\4\0\2\3\1\50\1\51\1\0\1\50"+
    "\24\3\3\50\1\0\1\50\2\0\2\50\2\0\1\50"+
    "\1\0\3\50\10\0\2\7\40\0\1\7\3\0\1\7"+
    "\5\0\2\50\1\7\1\52\24\0\3\50\1\0\1\50"+
    "\2\0\2\50\2\0\1\50\1\7\3\50\1\7\3\0"+
    "\2\3\1\0\1\3\2\0\1\3\1\53\22\3\24\0"+
    "\2\3\1\0\1\3\2\0\2\3\1\54\21\3\24\0"+
    "\2\3\1\0\1\3\2\0\17\3\1\55\4\3\24\0"+
    "\2\3\1\0\1\3\2\0\3\3\1\56\5\3\1\57"+
    "\12\3\24\0\2\3\1\0\1\3\2\0\21\3\1\60"+
    "\2\3\24\0\2\3\1\0\1\3\2\0\1\3\1\61"+
    "\6\3\1\62\7\3\1\63\3\3\24\0\2\3\1\0"+
    "\1\3\2\0\2\3\1\64\21\3\24\0\2\3\1\0"+
    "\1\3\2\0\12\3\1\65\3\3\1\66\5\3\24\0"+
    "\2\3\1\0\1\3\2\0\2\3\1\67\6\3\1\66"+
    "\12\3\24\0\2\3\1\0\1\3\2\0\11\3\1\70"+
    "\1\3\1\71\1\72\7\3\24\0\2\3\1\0\1\3"+
    "\2\0\10\3\1\73\2\3\1\74\10\3\24\0\2\3"+
    "\1\0\1\3\2\0\3\3\1\70\5\3\1\75\12\3"+
    "\26\0\2\50\1\0\1\50\24\0\1\76\2\50\1\0"+
    "\1\50\2\0\2\50\2\0\1\50\1\0\3\50\6\0"+
    "\2\50\1\0\1\50\24\0\1\50\1\77\1\50\1\0"+
    "\1\50\2\0\2\50\2\0\1\50\1\0\3\50\5\0"+
    "\1\100\2\50\1\0\1\50\24\0\2\50\1\101\1\0"+
    "\1\50\2\0\2\50\2\0\1\50\1\0\3\50\6\0"+
    "\2\50\1\0\1\50\24\0\3\50\1\102\1\103\2\0"+
    "\2\50\2\0\1\50\1\0\3\50\6\0\2\50\1\0"+
    "\1\50\24\0\3\50\1\0\1\50\2\0\2\50\2\0"+
    "\1\50\1\0\1\50\1\104\1\50\6\0\2\50\1\0"+
    "\1\50\24\0\3\50\1\0\1\50\2\0\2\50\2\0"+
    "\1\50\1\0\2\50\1\104\4\0\4\105\1\0\30\105"+
    "\1\0\1\105\2\0\2\105\2\0\1\105\1\0\3\105"+
    "\4\0\4\106\1\0\30\106\1\0\1\106\2\0\2\106"+
    "\2\0\1\106\1\0\3\106\5\0\1\107\54\0\1\110"+
    "\1\107\1\0\1\110\2\0\24\110\26\0\2\111\1\0"+
    "\1\111\24\0\3\111\1\0\1\111\2\0\2\111\2\0"+
    "\1\111\1\0\3\111\4\0\2\3\1\111\1\112\1\0"+
    "\1\111\24\3\3\111\1\0\1\111\2\0\2\111\2\0"+
    "\1\111\1\0\3\111\6\0\2\111\1\7\1\113\24\0"+
    "\3\111\1\0\1\111\2\0\2\111\2\0\1\111\1\7"+
    "\3\111\1\7\3\0\2\3\1\0\1\3\2\0\2\3"+
    "\1\114\21\3\24\0\2\3\1\0\1\3\2\0\7\3"+
    "\1\115\14\3\24\0\2\3\1\0\1\3\2\0\6\3"+
    "\1\116\15\3\24\0\2\3\1\0\1\3\2\0\6\3"+
    "\1\116\1\117\14\3\24\0\2\3\1\0\1\3\2\0"+
    "\12\3\1\120\11\3\24\0\2\3\1\0\1\3\2\0"+
    "\13\3\1\121\10\3\24\0\2\3\1\0\1\3\2\0"+
    "\20\3\1\66\3\3\24\0\2\3\1\0\1\3\2\0"+
    "\1\3\1\122\11\3\1\123\10\3\24\0\2\3\1\0"+
    "\1\3\2\0\22\3\1\124\1\3\24\0\2\3\1\0"+
    "\1\3\2\0\21\3\1\66\2\3\24\0\2\3\1\0"+
    "\1\3\2\0\6\3\1\125\15\3\24\0\2\3\1\0"+
    "\1\3\2\0\16\3\1\126\1\127\4\3\24\0\2\3"+
    "\1\0\1\3\2\0\1\3\1\66\22\3\24\0\2\3"+
    "\1\0\1\3\2\0\12\3\1\130\11\3\24\0\2\3"+
    "\1\0\1\3\2\0\12\3\1\131\11\3\24\0\2\3"+
    "\1\0\1\3\2\0\13\3\1\132\10\3\24\0\2\3"+
    "\1\0\1\3\2\0\7\3\1\133\14\3\24\0\2\3"+
    "\1\0\1\3\2\0\13\3\1\134\10\3\23\0\2\46"+
    "\1\100\44\46\1\0\6\46\1\0\4\135\1\0\30\135"+
    "\1\0\1\135\2\0\2\135\2\0\6\135\3\0\4\136"+
    "\1\0\30\136\1\0\1\136\2\0\2\136\2\0\1\136"+
    "\1\0\3\136\4\0\4\105\1\0\30\105\1\0\1\105"+
    "\2\0\2\105\2\0\1\105\1\0\3\105\1\0\1\137"+
    "\2\0\4\106\1\0\30\106\1\0\1\106\2\0\2\106"+
    "\2\0\1\106\1\0\3\106\2\0\1\137\1\0\1\110"+
    "\2\0\1\110\2\0\24\110\26\0\2\140\1\0\1\140"+
    "\24\0\3\140\1\0\1\140\2\0\2\140\2\0\1\140"+
    "\1\0\3\140\4\0\2\3\1\140\1\141\1\0\1\140"+
    "\24\3\3\140\1\0\1\140\2\0\2\140\2\0\1\140"+
    "\1\0\3\140\6\0\2\140\1\7\1\142\24\0\3\140"+
    "\1\0\1\140\2\0\2\140\2\0\1\140\1\7\3\140"+
    "\1\7\3\0\2\3\1\0\1\3\2\0\3\3\1\143"+
    "\20\3\24\0\2\3\1\0\1\3\2\0\14\3\1\144"+
    "\7\3\24\0\2\3\1\0\1\3\2\0\2\3\1\66"+
    "\21\3\24\0\2\3\1\0\1\3\2\0\5\3\1\133"+
    "\16\3\24\0\2\3\1\0\1\3\2\0\7\3\1\145"+
    "\14\3\24\0\2\3\1\0\1\3\2\0\7\3\1\117"+
    "\14\3\24\0\2\3\1\0\1\3\2\0\11\3\1\64"+
    "\12\3\24\0\2\3\1\0\1\3\2\0\6\3\1\66"+
    "\15\3\24\0\2\3\1\0\1\3\2\0\2\3\1\146"+
    "\21\3\24\0\2\3\1\0\1\3\2\0\7\3\1\147"+
    "\14\3\24\0\2\3\1\0\1\3\2\0\3\3\1\150"+
    "\20\3\24\0\2\3\1\0\1\3\2\0\2\3\1\151"+
    "\21\3\24\0\2\3\1\0\1\3\2\0\3\3\1\152"+
    "\20\3\24\0\2\3\1\0\1\3\2\0\5\3\1\153"+
    "\16\3\24\0\2\3\1\0\1\3\2\0\17\3\1\116"+
    "\4\3\24\0\2\3\1\0\1\3\2\0\10\3\1\66"+
    "\13\3\24\0\2\3\1\0\1\3\2\0\15\3\1\66"+
    "\6\3\24\0\4\135\1\0\30\135\1\154\1\135\2\0"+
    "\2\135\2\0\6\135\5\0\2\155\1\0\1\155\24\0"+
    "\3\155\1\0\1\155\2\0\2\155\2\0\1\155\1\0"+
    "\3\155\4\0\2\3\1\155\1\156\1\0\1\155\24\3"+
    "\3\155\1\0\1\155\2\0\2\155\2\0\1\155\1\0"+
    "\3\155\6\0\2\155\1\7\1\157\24\0\3\155\1\0"+
    "\1\155\2\0\2\155\2\0\1\155\1\7\3\155\1\7"+
    "\3\0\2\3\1\0\1\3\2\0\4\3\1\66\17\3"+
    "\24\0\2\3\1\0\1\3\2\0\1\3\1\160\22\3"+
    "\24\0\2\3\1\0\1\3\2\0\13\3\1\161\10\3"+
    "\24\0\2\3\1\0\1\3\2\0\11\3\1\162\12\3"+
    "\24\0\2\3\1\0\1\3\2\0\3\3\1\163\20\3"+
    "\24\0\2\3\1\0\1\3\2\0\14\3\1\164\7\3"+
    "\24\0\2\3\1\0\1\3\2\0\7\3\1\116\14\3"+
    "\24\0\2\3\1\0\1\3\2\0\17\3\1\165\4\3"+
    "\24\0\2\3\1\0\1\3\2\0\7\3\1\166\14\3"+
    "\62\0\1\167\21\0\2\170\1\0\1\170\24\0\3\170"+
    "\1\0\1\170\2\0\2\170\2\0\1\170\1\0\3\170"+
    "\4\0\2\3\1\170\1\171\1\0\1\170\24\3\3\170"+
    "\1\0\1\170\2\0\2\170\2\0\1\170\1\0\3\170"+
    "\6\0\2\170\1\7\1\172\24\0\3\170\1\0\1\170"+
    "\2\0\2\170\2\0\1\170\1\7\3\170\1\7\3\0"+
    "\2\3\1\0\1\3\2\0\12\3\1\66\11\3\24\0"+
    "\2\3\1\0\1\3\2\0\12\3\1\173\11\3\24\0"+
    "\2\3\1\0\1\3\2\0\16\3\1\66\5\3\24\0"+
    "\2\3\1\0\1\3\2\0\12\3\1\174\11\3\24\0"+
    "\2\3\1\0\1\3\2\0\17\3\1\175\4\3\24\0"+
    "\2\3\1\0\1\3\2\0\17\3\1\61\4\3\24\0"+
    "\2\3\1\0\1\3\2\0\13\3\1\176\10\3\26\0"+
    "\2\177\1\0\1\177\24\0\3\177\1\0\1\177\2\0"+
    "\2\177\2\0\1\177\1\0\3\177\4\0\2\3\1\177"+
    "\1\200\1\0\1\177\24\3\3\177\1\0\1\177\2\0"+
    "\2\177\2\0\1\177\1\0\3\177\6\0\2\177\1\7"+
    "\1\201\24\0\3\177\1\0\1\177\2\0\2\177\2\0"+
    "\1\177\1\7\3\177\1\7\3\0\2\3\1\0\1\3"+
    "\2\0\14\3\1\116\7\3\24\0\2\3\1\0\1\3"+
    "\2\0\5\3\1\124\16\3\24\0\2\3\1\0\1\3"+
    "\2\0\7\3\1\66\14\3\24\0\2\3\1\0\1\3"+
    "\2\0\11\3\1\160\12\3\26\0\2\202\1\0\1\202"+
    "\24\0\3\202\1\0\1\202\2\0\2\202\2\0\1\202"+
    "\1\0\3\202\4\0\2\3\1\202\1\203\1\0\1\202"+
    "\24\3\3\202\1\0\1\202\2\0\2\202\2\0\1\202"+
    "\1\0\3\202\6\0\2\202\1\7\1\204\24\0\3\202"+
    "\1\0\1\202\2\0\2\202\2\0\1\202\1\7\3\202"+
    "\1\7\5\0\2\205\1\0\1\205\24\0\3\205\1\0"+
    "\1\205\2\0\2\205\2\0\1\205\1\0\3\205\4\0"+
    "\2\3\1\205\1\206\1\0\1\205\24\3\3\205\1\0"+
    "\1\205\2\0\2\205\2\0\1\205\1\0\3\205\6\0"+
    "\2\205\1\7\1\207\24\0\3\205\1\0\1\205\2\0"+
    "\2\205\2\0\1\205\1\7\3\205\1\7\5\0\2\210"+
    "\1\0\1\210\24\0\3\210\1\0\1\210\2\0\2\210"+
    "\2\0\1\210\1\0\3\210\4\0\2\3\1\210\1\211"+
    "\1\0\1\210\24\3\3\210\1\0\1\210\2\0\2\210"+
    "\2\0\1\210\1\0\3\210\6\0\2\210\1\7\1\212"+
    "\24\0\3\210\1\0\1\210\2\0\2\210\2\0\1\210"+
    "\1\7\3\210\1\7\5\0\2\213\1\0\1\213\24\0"+
    "\3\213\1\0\1\213\2\0\2\213\2\0\1\213\1\0"+
    "\3\213\4\0\2\3\1\213\1\214\1\0\1\213\24\3"+
    "\3\213\1\0\1\213\2\0\2\213\2\0\1\213\1\0"+
    "\3\213\6\0\2\213\1\7\1\215\24\0\3\213\1\0"+
    "\1\213\2\0\2\213\2\0\1\213\1\7\3\213\1\7"+
    "\5\0\2\216\1\0\1\216\24\0\3\216\1\0\1\216"+
    "\2\0\2\216\2\0\1\216\1\0\3\216\4\0\2\3"+
    "\1\216\1\217\1\0\1\216\24\3\3\216\1\0\1\216"+
    "\2\0\2\216\2\0\1\216\1\0\3\216\6\0\2\216"+
    "\1\7\1\220\24\0\3\216\1\0\1\216\2\0\2\216"+
    "\2\0\1\216\1\7\3\216\1\7\5\0\2\221\1\0"+
    "\1\221\24\0\3\221\1\0\1\221\2\0\2\221\2\0"+
    "\1\221\1\0\3\221\4\0\2\3\1\221\1\222\1\0"+
    "\1\221\24\3\3\221\1\0\1\221\2\0\2\221\2\0"+
    "\1\221\1\0\3\221\6\0\2\221\1\7\1\223\24\0"+
    "\3\221\1\0\1\221\2\0\2\221\2\0\1\221\1\7"+
    "\3\221\1\7\5\0\2\224\1\0\1\224\24\0\3\224"+
    "\1\0\1\224\2\0\2\224\2\0\1\224\1\0\3\224"+
    "\4\0\2\3\1\224\1\225\1\0\1\224\24\3\3\224"+
    "\1\0\1\224\2\0\2\224\2\0\1\224\1\0\3\224"+
    "\6\0\2\224\1\7\1\226\24\0\3\224\1\0\1\224"+
    "\2\0\2\224\2\0\1\224\1\7\3\224\1\7\5\0"+
    "\2\227\1\0\1\227\24\0\3\227\1\0\1\227\2\0"+
    "\2\227\2\0\1\227\1\0\3\227\4\0\2\3\1\227"+
    "\1\230\1\0\1\227\24\3\3\227\1\0\1\227\2\0"+
    "\2\227\2\0\1\227\1\0\3\227\6\0\2\227\1\7"+
    "\1\231\24\0\3\227\1\0\1\227\2\0\2\227\2\0"+
    "\1\227\1\7\3\227\1\7\5\0\2\232\1\0\1\232"+
    "\24\0\3\232\1\0\1\232\2\0\2\232\2\0\1\232"+
    "\1\0\3\232\4\0\2\3\1\232\1\233\1\0\1\232"+
    "\24\3\3\232\1\0\1\232\2\0\2\232\2\0\1\232"+
    "\1\0\3\232\6\0\2\232\1\7\1\234\24\0\3\232"+
    "\1\0\1\232\2\0\2\232\2\0\1\232\1\7\3\232"+
    "\1\7\5\0\2\235\1\0\1\235\24\0\3\235\1\0"+
    "\1\235\2\0\2\235\2\0\1\235\1\0\3\235\4\0"+
    "\2\3\1\235\1\236\1\0\1\235\24\3\3\235\1\0"+
    "\1\235\2\0\2\235\2\0\1\235\1\0\3\235\6\0"+
    "\2\235\1\7\1\237\24\0\3\235\1\0\1\235\2\0"+
    "\2\235\2\0\1\235\1\7\3\235\1\7\5\0\2\240"+
    "\1\0\1\240\24\0\3\240\1\0\1\240\2\0\2\240"+
    "\2\0\1\240\1\0\3\240\4\0\2\3\1\240\1\241"+
    "\1\0\1\240\24\3\3\240\1\0\1\240\2\0\2\240"+
    "\2\0\1\240\1\0\3\240\6\0\2\240\1\7\1\242"+
    "\24\0\3\240\1\0\1\240\2\0\2\240\2\0\1\240"+
    "\1\7\3\240\1\7\5\0\2\243\1\0\1\243\24\0"+
    "\3\243\1\0\1\243\2\0\2\243\2\0\1\243\1\0"+
    "\3\243\4\0\2\3\1\243\1\244\1\0\1\243\24\3"+
    "\3\243\1\0\1\243\2\0\2\243\2\0\1\243\1\0"+
    "\3\243\6\0\2\243\1\7\1\245\24\0\3\243\1\0"+
    "\1\243\2\0\2\243\2\0\1\243\1\7\3\243\1\7"+
    "\5\0\2\246\1\0\1\246\24\0\3\246\1\0\1\246"+
    "\2\0\2\246\2\0\1\246\1\0\3\246\4\0\2\3"+
    "\1\246\1\247\1\0\1\246\24\3\3\246\1\0\1\246"+
    "\2\0\2\246\2\0\1\246\1\0\3\246\6\0\2\246"+
    "\1\7\1\250\24\0\3\246\1\0\1\246\2\0\2\246"+
    "\2\0\1\246\1\7\3\246\1\7\5\0\2\251\1\0"+
    "\1\251\24\0\3\251\1\0\1\251\2\0\2\251\2\0"+
    "\1\251\1\0\3\251\4\0\2\3\1\251\1\252\1\0"+
    "\1\251\24\3\3\251\1\0\1\251\2\0\2\251\2\0"+
    "\1\251\1\0\3\251\6\0\2\251\1\7\1\253\24\0"+
    "\3\251\1\0\1\251\2\0\2\251\2\0\1\251\1\7"+
    "\3\251\1\7\5\0\2\254\1\0\1\254\24\0\3\254"+
    "\1\0\1\254\2\0\2\254\2\0\1\254\1\0\3\254"+
    "\4\0\2\3\1\254\1\255\1\0\1\254\24\3\3\254"+
    "\1\0\1\254\2\0\2\254\2\0\1\254\1\0\3\254"+
    "\6\0\2\254\1\7\1\256\24\0\3\254\1\0\1\254"+
    "\2\0\2\254\2\0\1\254\1\7\3\254\1\7\5\0"+
    "\2\257\1\0\1\257\24\0\3\257\1\0\1\257\2\0"+
    "\2\257\2\0\1\257\1\0\3\257\4\0\2\3\1\257"+
    "\1\260\1\0\1\257\24\3\3\257\1\0\1\257\2\0"+
    "\2\257\2\0\1\257\1\0\3\257\6\0\2\257\1\7"+
    "\1\261\24\0\3\257\1\0\1\257\2\0\2\257\2\0"+
    "\1\257\1\7\3\257\1\7\5\0\2\262\1\0\1\262"+
    "\24\0\3\262\1\0\1\262\2\0\2\262\2\0\1\262"+
    "\1\0\3\262\4\0\2\3\1\262\1\263\1\0\1\262"+
    "\24\3\3\262\1\0\1\262\2\0\2\262\2\0\1\262"+
    "\1\0\3\262\6\0\2\262\1\7\1\264\24\0\3\262"+
    "\1\0\1\262\2\0\2\262\2\0\1\262\1\7\3\262"+
    "\1\7\5\0\2\265\1\0\1\265\24\0\3\265\1\0"+
    "\1\265\2\0\2\265\2\0\1\265\1\0\3\265\4\0"+
    "\2\3\1\265\1\266\1\0\1\265\24\3\3\265\1\0"+
    "\1\265\2\0\2\265\2\0\1\265\1\0\3\265\6\0"+
    "\2\265\1\7\1\267\24\0\3\265\1\0\1\265\2\0"+
    "\2\265\2\0\1\265\1\7\3\265\1\7\5\0\2\270"+
    "\1\0\1\270\24\0\3\270\1\0\1\270\2\0\2\270"+
    "\2\0\1\270\1\0\3\270\4\0\2\3\1\270\1\271"+
    "\1\0\1\270\24\3\3\270\1\0\1\270\2\0\2\270"+
    "\2\0\1\270\1\0\3\270\6\0\2\270\1\7\1\272"+
    "\24\0\3\270\1\0\1\270\2\0\2\270\2\0\1\270"+
    "\1\7\3\270\1\7\5\0\2\273\1\0\1\273\24\0"+
    "\3\273\1\0\1\273\2\0\2\273\2\0\1\273\1\0"+
    "\3\273\4\0\2\3\1\273\1\274\1\0\1\273\24\3"+
    "\3\273\1\0\1\273\2\0\2\273\2\0\1\273\1\0"+
    "\3\273\6\0\2\273\1\7\1\275\24\0\3\273\1\0"+
    "\1\273\2\0\2\273\2\0\1\273\1\7\3\273\1\7"+
    "\5\0\2\276\1\0\1\276\24\0\3\276\1\0\1\276"+
    "\2\0\2\276\2\0\1\276\1\0\3\276\4\0\2\3"+
    "\1\276\1\277\1\0\1\276\24\3\3\276\1\0\1\276"+
    "\2\0\2\276\2\0\1\276\1\0\3\276\6\0\2\276"+
    "\1\7\1\300\24\0\3\276\1\0\1\276\2\0\2\276"+
    "\2\0\1\276\1\7\3\276\1\7\5\0\2\301\1\0"+
    "\1\301\24\0\3\301\1\0\1\301\2\0\2\301\2\0"+
    "\1\301\1\0\3\301\4\0\2\3\1\301\1\302\1\0"+
    "\1\301\24\3\3\301\1\0\1\301\2\0\2\301\2\0"+
    "\1\301\1\0\3\301\6\0\2\301\1\7\1\303\24\0"+
    "\3\301\1\0\1\301\2\0\2\301\2\0\1\301\1\7"+
    "\3\301\1\7\5\0\2\304\1\0\1\304\24\0\3\304"+
    "\1\0\1\304\2\0\2\304\2\0\1\304\1\0\3\304"+
    "\4\0\2\3\1\304\1\305\1\0\1\304\24\3\3\304"+
    "\1\0\1\304\2\0\2\304\2\0\1\304\1\0\3\304"+
    "\6\0\2\304\1\7\1\306\24\0\3\304\1\0\1\304"+
    "\2\0\2\304\2\0\1\304\1\7\3\304\1\7\5\0"+
    "\2\307\1\0\1\307\24\0\3\307\1\0\1\307\2\0"+
    "\2\307\2\0\1\307\1\0\3\307\4\0\2\3\1\307"+
    "\1\310\1\0\1\307\24\3\3\307\1\0\1\307\2\0"+
    "\2\307\2\0\1\307\1\0\3\307\6\0\2\307\1\7"+
    "\1\311\24\0\3\307\1\0\1\307\2\0\2\307\2\0"+
    "\1\307\1\7\3\307\1\7\5\0\2\312\1\0\1\312"+
    "\24\0\3\312\1\0\1\312\2\0\2\312\2\0\1\312"+
    "\1\0\3\312\4\0\2\3\1\312\1\313\1\0\1\312"+
    "\24\3\3\312\1\0\1\312\2\0\2\312\2\0\1\312"+
    "\1\0\3\312\6\0\2\312\1\7\1\314\24\0\3\312"+
    "\1\0\1\312\2\0\2\312\2\0\1\312\1\7\3\312"+
    "\1\7\5\0\2\315\1\0\1\315\24\0\3\315\1\0"+
    "\1\315\2\0\2\315\2\0\1\315\1\0\3\315\4\0"+
    "\2\3\1\315\1\316\1\0\1\315\24\3\3\315\1\0"+
    "\1\315\2\0\2\315\2\0\1\315\1\0\3\315\6\0"+
    "\2\315\1\7\1\317\24\0\3\315\1\0\1\315\2\0"+
    "\2\315\2\0\1\315\1\7\3\315\1\7\5\0\2\320"+
    "\1\0\1\320\24\0\3\320\1\0\1\320\2\0\2\320"+
    "\2\0\1\320\1\0\3\320\4\0\2\3\1\320\1\321"+
    "\1\0\1\320\24\3\3\320\1\0\1\320\2\0\2\320"+
    "\2\0\1\320\1\0\3\320\6\0\2\320\1\7\1\322"+
    "\24\0\3\320\1\0\1\320\2\0\2\320\2\0\1\320"+
    "\1\7\3\320\1\7\5\0\2\323\1\0\1\323\24\0"+
    "\3\323\1\0\1\323\2\0\2\323\2\0\1\323\1\0"+
    "\3\323\4\0\2\3\1\323\1\324\1\0\1\323\24\3"+
    "\3\323\1\0\1\323\2\0\2\323\2\0\1\323\1\0"+
    "\3\323\6\0\2\323\1\7\1\325\24\0\3\323\1\0"+
    "\1\323\2\0\2\323\2\0\1\323\1\7\3\323\1\7"+
    "\5\0\2\326\1\0\1\326\24\0\3\326\1\0\1\326"+
    "\2\0\2\326\2\0\1\326\1\0\3\326\4\0\2\3"+
    "\1\326\1\327\1\0\1\326\24\3\3\326\1\0\1\326"+
    "\2\0\2\326\2\0\1\326\1\0\3\326\6\0\2\326"+
    "\1\7\1\330\24\0\3\326\1\0\1\326\2\0\2\326"+
    "\2\0\1\326\1\7\3\326\1\7\5\0\2\331\1\0"+
    "\1\331\24\0\3\331\1\0\1\331\2\0\2\331\2\0"+
    "\1\331\1\0\3\331\4\0\2\3\1\331\1\332\1\0"+
    "\1\331\24\3\3\331\1\0\1\331\2\0\2\331\2\0"+
    "\1\331\1\0\3\331\6\0\2\331\1\7\1\333\24\0"+
    "\3\331\1\0\1\331\2\0\2\331\2\0\1\331\1\7"+
    "\3\331\1\7\5\0\2\334\1\0\1\334\24\0\3\334"+
    "\1\0\1\334\2\0\2\334\2\0\1\334\1\0\3\334"+
    "\4\0\2\3\1\334\1\335\1\0\1\334\24\3\3\334"+
    "\1\0\1\334\2\0\2\334\2\0\1\334\1\0\3\334"+
    "\6\0\2\334\1\7\1\336\24\0\3\334\1\0\1\334"+
    "\2\0\2\334\2\0\1\334\1\7\3\334\1\7\5\0"+
    "\2\337\1\0\1\337\24\0\3\337\1\0\1\337\2\0"+
    "\2\337\2\0\1\337\1\0\3\337\4\0\2\3\1\337"+
    "\1\340\1\0\1\337\24\3\3\337\1\0\1\337\2\0"+
    "\2\337\2\0\1\337\1\0\3\337\6\0\2\337\1\7"+
    "\1\341\24\0\3\337\1\0\1\337\2\0\2\337\2\0"+
    "\1\337\1\7\3\337\1\7\5\0\2\342\1\0\1\342"+
    "\24\0\3\342\1\0\1\342\2\0\2\342\2\0\1\342"+
    "\1\0\3\342\4\0\2\3\1\342\1\343\1\0\1\342"+
    "\24\3\3\342\1\0\1\342\2\0\2\342\2\0\1\342"+
    "\1\0\3\342\6\0\2\342\1\7\1\344\24\0\3\342"+
    "\1\0\1\342\2\0\2\342\2\0\1\342\1\7\3\342"+
    "\1\7\5\0\2\345\1\0\1\345\24\0\3\345\1\0"+
    "\1\345\2\0\2\345\2\0\1\345\1\0\3\345\4\0"+
    "\2\3\1\345\1\346\1\0\1\345\24\3\3\345\1\0"+
    "\1\345\2\0\2\345\2\0\1\345\1\0\3\345\6\0"+
    "\2\345\1\7\1\347\24\0\3\345\1\0\1\345\2\0"+
    "\2\345\2\0\1\345\1\7\3\345\1\7\5\0\2\350"+
    "\1\0\1\350\24\0\3\350\1\0\1\350\2\0\2\350"+
    "\2\0\1\350\1\0\3\350\4\0\2\3\1\350\1\351"+
    "\1\0\1\350\24\3\3\350\1\0\1\350\2\0\2\350"+
    "\2\0\1\350\1\0\3\350\6\0\2\350\1\7\1\352"+
    "\24\0\3\350\1\0\1\350\2\0\2\350\2\0\1\350"+
    "\1\7\3\350\1\7\5\0\2\353\1\0\1\353\24\0"+
    "\3\353\1\0\1\353\2\0\2\353\2\0\1\353\1\0"+
    "\3\353\4\0\2\3\1\353\1\354\1\0\1\353\24\3"+
    "\3\353\1\0\1\353\2\0\2\353\2\0\1\353\1\0"+
    "\3\353\6\0\2\353\1\7\1\355\24\0\3\353\1\0"+
    "\1\353\2\0\2\353\2\0\1\353\1\7\3\353\1\7"+
    "\5\0\2\356\1\0\1\356\24\0\3\356\1\0\1\356"+
    "\2\0\2\356\2\0\1\356\1\0\3\356\4\0\2\3"+
    "\1\356\1\357\1\0\1\356\24\3\3\356\1\0\1\356"+
    "\2\0\2\356\2\0\1\356\1\0\3\356\6\0\2\356"+
    "\1\7\1\360\24\0\3\356\1\0\1\356\2\0\2\356"+
    "\2\0\1\356\1\7\3\356\1\7\5\0\2\361\1\0"+
    "\1\361\24\0\3\361\1\0\1\361\2\0\2\361\2\0"+
    "\1\361\1\0\3\361\4\0\2\3\1\361\1\362\1\0"+
    "\1\361\24\3\3\361\1\0\1\361\2\0\2\361\2\0"+
    "\1\361\1\0\3\361\6\0\2\361\1\7\1\363\24\0"+
    "\3\361\1\0\1\361\2\0\2\361\2\0\1\361\1\7"+
    "\3\361\1\7\5\0\2\364\1\0\1\364\24\0\3\364"+
    "\1\0\1\364\2\0\2\364\2\0\1\364\1\0\3\364"+
    "\4\0\2\3\1\364\1\365\1\0\1\364\24\3\3\364"+
    "\1\0\1\364\2\0\2\364\2\0\1\364\1\0\3\364"+
    "\6\0\2\364\1\7\1\366\24\0\3\364\1\0\1\364"+
    "\2\0\2\364\2\0\1\364\1\7\3\364\1\7\5\0"+
    "\2\367\1\0\1\367\24\0\3\367\1\0\1\367\2\0"+
    "\2\367\2\0\1\367\1\0\3\367\4\0\2\3\1\367"+
    "\1\370\1\0\1\367\24\3\3\367\1\0\1\367\2\0"+
    "\2\367\2\0\1\367\1\0\3\367\6\0\2\367\1\7"+
    "\1\371\24\0\3\367\1\0\1\367\2\0\2\367\2\0"+
    "\1\367\1\7\3\367\1\7\5\0\2\372\1\0\1\372"+
    "\24\0\3\372\1\0\1\372\2\0\2\372\2\0\1\372"+
    "\1\0\3\372\4\0\2\3\1\372\1\373\1\0\1\372"+
    "\24\3\3\372\1\0\1\372\2\0\2\372\2\0\1\372"+
    "\1\0\3\372\6\0\2\372\1\7\1\374\24\0\3\372"+
    "\1\0\1\372\2\0\2\372\2\0\1\372\1\7\3\372"+
    "\1\7\5\0\2\375\1\0\1\375\24\0\3\375\1\0"+
    "\1\375\2\0\2\375\2\0\1\375\1\0\3\375\4\0"+
    "\2\3\1\375\1\376\1\0\1\375\24\3\3\375\1\0"+
    "\1\375\2\0\2\375\2\0\1\375\1\0\3\375\6\0"+
    "\2\375\1\7\1\377\24\0\3\375\1\0\1\375\2\0"+
    "\2\375\2\0\1\375\1\7\3\375\1\7\5\0\2\u0100"+
    "\1\0\1\u0100\24\0\3\u0100\1\0\1\u0100\2\0\2\u0100"+
    "\2\0\1\u0100\1\0\3\u0100\4\0\2\3\1\u0100\1\u0101"+
    "\1\0\1\u0100\24\3\3\u0100\1\0\1\u0100\2\0\2\u0100"+
    "\2\0\1\u0100\1\0\3\u0100\6\0\2\u0100\1\7\1\u0102"+
    "\24\0\3\u0100\1\0\1\u0100\2\0\2\u0100\2\0\1\u0100"+
    "\1\7\3\u0100\1\7\5\0\2\u0103\1\0\1\u0103\24\0"+
    "\3\u0103\1\0\1\u0103\2\0\2\u0103\2\0\1\u0103\1\0"+
    "\3\u0103\4\0\2\3\1\u0103\1\u0104\1\0\1\u0103\24\3"+
    "\3\u0103\1\0\1\u0103\2\0\2\u0103\2\0\1\u0103\1\0"+
    "\3\u0103\6\0\2\u0103\1\7\1\u0105\24\0\3\u0103\1\0"+
    "\1\u0103\2\0\2\u0103\2\0\1\u0103\1\7\3\u0103\1\7"+
    "\5\0\2\u0106\1\0\1\u0106\24\0\3\u0106\1\0\1\u0106"+
    "\2\0\2\u0106\2\0\1\u0106\1\0\3\u0106\4\0\2\3"+
    "\1\u0106\1\u0107\1\0\1\u0106\24\3\3\u0106\1\0\1\u0106"+
    "\2\0\2\u0106\2\0\1\u0106\1\0\3\u0106\6\0\2\u0106"+
    "\1\7\1\u0108\24\0\3\u0106\1\0\1\u0106\2\0\2\u0106"+
    "\2\0\1\u0106\1\7\3\u0106\1\7\5\0\2\u0109\1\0"+
    "\1\u0109\24\0\3\u0109\1\0\1\u0109\2\0\2\u0109\2\0"+
    "\1\u0109\1\0\3\u0109\4\0\2\3\1\u0109\1\u010a\1\0"+
    "\1\u0109\24\3\3\u0109\1\0\1\u0109\2\0\2\u0109\2\0"+
    "\1\u0109\1\0\3\u0109\6\0\2\u0109\1\7\1\u010b\24\0"+
    "\3\u0109\1\0\1\u0109\2\0\2\u0109\2\0\1\u0109\1\7"+
    "\3\u0109\1\7\5\0\2\u010c\1\0\1\u010c\24\0\3\u010c"+
    "\1\0\1\u010c\2\0\2\u010c\2\0\1\u010c\1\0\3\u010c"+
    "\4\0\2\3\1\u010c\1\u010d\1\0\1\u010c\24\3\3\u010c"+
    "\1\0\1\u010c\2\0\2\u010c\2\0\1\u010c\1\0\3\u010c"+
    "\6\0\2\u010c\1\7\1\u010e\24\0\3\u010c\1\0\1\u010c"+
    "\2\0\2\u010c\2\0\1\u010c\1\7\3\u010c\1\7\5\0"+
    "\2\u010f\1\0\1\u010f\24\0\3\u010f\1\0\1\u010f\2\0"+
    "\2\u010f\2\0\1\u010f\1\0\3\u010f\4\0\2\3\1\u010f"+
    "\1\u0110\1\0\1\u010f\24\3\3\u010f\1\0\1\u010f\2\0"+
    "\2\u010f\2\0\1\u010f\1\0\3\u010f\6\0\2\u010f\1\7"+
    "\1\u0111\24\0\3\u010f\1\0\1\u010f\2\0\2\u010f\2\0"+
    "\1\u010f\1\7\3\u010f\1\7\5\0\2\u0112\1\0\1\u0112"+
    "\24\0\3\u0112\1\0\1\u0112\2\0\2\u0112\2\0\1\u0112"+
    "\1\0\3\u0112\4\0\2\3\1\u0112\1\u0113\1\0\1\u0112"+
    "\24\3\3\u0112\1\0\1\u0112\2\0\2\u0112\2\0\1\u0112"+
    "\1\0\3\u0112\6\0\2\u0112\1\7\1\u0114\24\0\3\u0112"+
    "\1\0\1\u0112\2\0\2\u0112\2\0\1\u0112\1\7\3\u0112"+
    "\1\7\5\0\2\u0115\1\0\1\u0115\24\0\3\u0115\1\0"+
    "\1\u0115\2\0\2\u0115\2\0\1\u0115\1\0\3\u0115\4\0"+
    "\2\3\1\u0115\1\u0116\1\0\1\u0115\24\3\3\u0115\1\0"+
    "\1\u0115\2\0\2\u0115\2\0\1\u0115\1\0\3\u0115\6\0"+
    "\2\u0115\1\7\1\u0117\24\0\3\u0115\1\0\1\u0115\2\0"+
    "\2\u0115\2\0\1\u0115\1\7\3\u0115\1\7\5\0\2\u0118"+
    "\1\0\1\u0118\24\0\3\u0118\1\0\1\u0118\2\0\2\u0118"+
    "\2\0\1\u0118\1\0\3\u0118\4\0\2\3\1\u0118\1\u0119"+
    "\1\0\1\u0118\24\3\3\u0118\1\0\1\u0118\2\0\2\u0118"+
    "\2\0\1\u0118\1\0\3\u0118\6\0\2\u0118\1\7\1\u011a"+
    "\24\0\3\u0118\1\0\1\u0118\2\0\2\u0118\2\0\1\u0118"+
    "\1\7\3\u0118\1\7\5\0\2\u011b\1\0\1\u011b\24\0"+
    "\3\u011b\1\0\1\u011b\2\0\2\u011b\2\0\1\u011b\1\0"+
    "\3\u011b\4\0\2\3\1\u011b\1\u011c\1\0\1\u011b\24\3"+
    "\3\u011b\1\0\1\u011b\2\0\2\u011b\2\0\1\u011b\1\0"+
    "\3\u011b\6\0\2\u011b\1\7\1\u011d\24\0\3\u011b\1\0"+
    "\1\u011b\2\0\2\u011b\2\0\1\u011b\1\7\3\u011b\1\7"+
    "\5\0\2\u011e\1\0\1\u011e\24\0\3\u011e\1\0\1\u011e"+
    "\2\0\2\u011e\2\0\1\u011e\1\0\3\u011e\4\0\2\3"+
    "\1\u011e\1\u011f\1\0\1\u011e\24\3\3\u011e\1\0\1\u011e"+
    "\2\0\2\u011e\2\0\1\u011e\1\0\3\u011e\6\0\2\u011e"+
    "\1\7\1\u0120\24\0\3\u011e\1\0\1\u011e\2\0\2\u011e"+
    "\2\0\1\u011e\1\7\3\u011e\1\7\5\0\2\u0121\1\0"+
    "\1\u0121\24\0\3\u0121\1\0\1\u0121\2\0\2\u0121\2\0"+
    "\1\u0121\1\0\3\u0121\4\0\2\3\1\u0121\1\u0122\1\0"+
    "\1\u0121\24\3\3\u0121\1\0\1\u0121\2\0\2\u0121\2\0"+
    "\1\u0121\1\0\3\u0121\6\0\2\u0121\1\7\1\u0123\24\0"+
    "\3\u0121\1\0\1\u0121\2\0\2\u0121\2\0\1\u0121\1\7"+
    "\3\u0121\1\7\5\0\2\u0124\1\0\1\u0124\24\0\3\u0124"+
    "\1\0\1\u0124\2\0\2\u0124\2\0\1\u0124\1\0\3\u0124"+
    "\4\0\2\3\1\u0124\1\u0125\1\0\1\u0124\24\3\3\u0124"+
    "\1\0\1\u0124\2\0\2\u0124\2\0\1\u0124\1\0\3\u0124"+
    "\6\0\2\u0124\1\7\1\u0126\24\0\3\u0124\1\0\1\u0124"+
    "\2\0\2\u0124\2\0\1\u0124\1\7\3\u0124\1\7\5\0"+
    "\2\u0127\1\0\1\u0127\24\0\3\u0127\1\0\1\u0127\2\0"+
    "\2\u0127\2\0\1\u0127\1\0\3\u0127\4\0\2\3\1\u0127"+
    "\1\u0128\1\0\1\u0127\24\3\3\u0127\1\0\1\u0127\2\0"+
    "\2\u0127\2\0\1\u0127\1\0\3\u0127\6\0\2\u0127\1\7"+
    "\1\u0129\24\0\3\u0127\1\0\1\u0127\2\0\2\u0127\2\0"+
    "\1\u0127\1\7\3\u0127\1\7\5\0\2\u012a\1\0\1\u012a"+
    "\24\0\3\u012a\1\0\1\u012a\2\0\2\u012a\2\0\1\u012a"+
    "\1\0\3\u012a\4\0\2\3\1\u012a\1\u012b\1\0\1\u012a"+
    "\24\3\3\u012a\1\0\1\u012a\2\0\2\u012a\2\0\1\u012a"+
    "\1\0\3\u012a\6\0\2\u012a\1\7\1\u012c\24\0\3\u012a"+
    "\1\0\1\u012a\2\0\2\u012a\2\0\1\u012a\1\7\3\u012a"+
    "\1\7\5\0\2\u012d\1\0\1\u012d\24\0\3\u012d\1\0"+
    "\1\u012d\2\0\2\u012d\2\0\1\u012d\1\0\3\u012d\4\0"+
    "\2\3\1\u012d\1\u012e\1\0\1\u012d\24\3\3\u012d\1\0"+
    "\1\u012d\2\0\2\u012d\2\0\1\u012d\1\0\3\u012d\6\0"+
    "\2\u012d\1\7\1\u012f\24\0\3\u012d\1\0\1\u012d\2\0"+
    "\2\u012d\2\0\1\u012d\1\7\3\u012d\1\7\5\0\2\u0130"+
    "\1\0\1\u0130\24\0\3\u0130\1\0\1\u0130\2\0\2\u0130"+
    "\2\0\1\u0130\1\0\3\u0130\4\0\2\3\1\u0130\1\u0131"+
    "\1\0\1\u0130\24\3\3\u0130\1\0\1\u0130\2\0\2\u0130"+
    "\2\0\1\u0130\1\0\3\u0130\6\0\2\u0130\1\7\1\u0132"+
    "\24\0\3\u0130\1\0\1\u0130\2\0\2\u0130\2\0\1\u0130"+
    "\1\7\3\u0130\1\7\5\0\2\u0133\1\0\1\u0133\24\0"+
    "\3\u0133\1\0\1\u0133\2\0\2\u0133\2\0\1\u0133\1\0"+
    "\3\u0133\4\0\2\3\1\u0133\1\u0134\1\0\1\u0133\24\3"+
    "\3\u0133\1\0\1\u0133\2\0\2\u0133\2\0\1\u0133\1\0"+
    "\3\u0133\6\0\2\u0133\1\7\1\u0135\24\0\3\u0133\1\0"+
    "\1\u0133\2\0\2\u0133\2\0\1\u0133\1\7\3\u0133\1\7"+
    "\5\0\2\u0136\1\0\1\u0136\24\0\3\u0136\1\0\1\u0136"+
    "\2\0\2\u0136\2\0\1\u0136\1\0\3\u0136\4\0\2\3"+
    "\1\u0136\1\u0137\1\0\1\u0136\24\3\3\u0136\1\0\1\u0136"+
    "\2\0\2\u0136\2\0\1\u0136\1\0\3\u0136\6\0\2\u0136"+
    "\1\7\1\u0138\24\0\3\u0136\1\0\1\u0136\2\0\2\u0136"+
    "\2\0\1\u0136\1\7\3\u0136\1\7\5\0\2\u0139\1\0"+
    "\1\u0139\24\0\3\u0139\1\0\1\u0139\2\0\2\u0139\2\0"+
    "\1\u0139\1\0\3\u0139\4\0\2\3\1\u0139\1\u013a\1\0"+
    "\1\u0139\24\3\3\u0139\1\0\1\u0139\2\0\2\u0139\2\0"+
    "\1\u0139\1\0\3\u0139\6\0\2\u0139\1\7\1\u013b\24\0"+
    "\3\u0139\1\0\1\u0139\2\0\2\u0139\2\0\1\u0139\1\7"+
    "\3\u0139\1\7\5\0\2\u013c\1\0\1\u013c\24\0\3\u013c"+
    "\1\0\1\u013c\2\0\2\u013c\2\0\1\u013c\1\0\3\u013c"+
    "\4\0\2\3\1\u013c\1\u013d\1\0\1\u013c\24\3\3\u013c"+
    "\1\0\1\u013c\2\0\2\u013c\2\0\1\u013c\1\0\3\u013c"+
    "\6\0\2\u013c\1\7\1\u013e\24\0\3\u013c\1\0\1\u013c"+
    "\2\0\2\u013c\2\0\1\u013c\1\7\3\u013c\1\7\5\0"+
    "\2\u013f\1\0\1\u013f\24\0\3\u013f\1\0\1\u013f\2\0"+
    "\2\u013f\2\0\1\u013f\1\0\3\u013f\4\0\2\3\1\u013f"+
    "\1\u0140\1\0\1\u013f\24\3\3\u013f\1\0\1\u013f\2\0"+
    "\2\u013f\2\0\1\u013f\1\0\3\u013f\6\0\2\u013f\1\7"+
    "\1\u0141\24\0\3\u013f\1\0\1\u013f\2\0\2\u013f\2\0"+
    "\1\u013f\1\7\3\u013f\1\7\5\0\2\u0142\1\0\1\u0142"+
    "\24\0\3\u0142\1\0\1\u0142\2\0\2\u0142\2\0\1\u0142"+
    "\1\0\3\u0142\4\0\2\3\1\u0142\1\u0143\1\0\1\u0142"+
    "\24\3\3\u0142\1\0\1\u0142\2\0\2\u0142\2\0\1\u0142"+
    "\1\0\3\u0142\6\0\2\u0142\1\7\1\u0144\24\0\3\u0142"+
    "\1\0\1\u0142\2\0\2\u0142\2\0\1\u0142\1\7\3\u0142"+
    "\1\7\5\0\2\u0145\1\0\1\u0145\24\0\3\u0145\1\0"+
    "\1\u0145\2\0\2\u0145\2\0\1\u0145\1\0\3\u0145\4\0"+
    "\2\3\1\u0145\1\u0146\1\0\1\u0145\24\3\3\u0145\1\0"+
    "\1\u0145\2\0\2\u0145\2\0\1\u0145\1\0\3\u0145\6\0"+
    "\2\u0145\1\7\1\u0147\24\0\3\u0145\1\0\1\u0145\2\0"+
    "\2\u0145\2\0\1\u0145\1\7\3\u0145\1\7\5\0\2\u0148"+
    "\1\0\1\u0148\24\0\3\u0148\1\0\1\u0148\2\0\2\u0148"+
    "\2\0\1\u0148\1\0\3\u0148\4\0\2\3\1\u0148\1\u0149"+
    "\1\0\1\u0148\24\3\3\u0148\1\0\1\u0148\2\0\2\u0148"+
    "\2\0\1\u0148\1\0\3\u0148\6\0\2\u0148\1\7\1\u014a"+
    "\24\0\3\u0148\1\0\1\u0148\2\0\2\u0148\2\0\1\u0148"+
    "\1\7\3\u0148\1\7\5\0\2\u014b\1\0\1\u014b\24\0"+
    "\3\u014b\1\0\1\u014b\2\0\2\u014b\2\0\1\u014b\1\0"+
    "\3\u014b\4\0\2\3\1\u014b\1\u014c\1\0\1\u014b\24\3"+
    "\3\u014b\1\0\1\u014b\2\0\2\u014b\2\0\1\u014b\1\0"+
    "\3\u014b\6\0\2\u014b\1\7\1\u014d\24\0\3\u014b\1\0"+
    "\1\u014b\2\0\2\u014b\2\0\1\u014b\1\7\3\u014b\1\7"+
    "\5\0\2\u014e\1\0\1\u014e\24\0\3\u014e\1\0\1\u014e"+
    "\2\0\2\u014e\2\0\1\u014e\1\0\3\u014e\4\0\2\3"+
    "\1\u014e\1\u014f\1\0\1\u014e\24\3\3\u014e\1\0\1\u014e"+
    "\2\0\2\u014e\2\0\1\u014e\1\0\3\u014e\6\0\2\u014e"+
    "\1\7\1\u0150\24\0\3\u014e\1\0\1\u014e\2\0\2\u014e"+
    "\2\0\1\u014e\1\7\3\u014e\1\7\5\0\2\u0151\1\0"+
    "\1\u0151\24\0\3\u0151\1\0\1\u0151\2\0\2\u0151\2\0"+
    "\1\u0151\1\0\3\u0151\4\0\2\3\1\u0151\1\u0152\1\0"+
    "\1\u0151\24\3\3\u0151\1\0\1\u0151\2\0\2\u0151\2\0"+
    "\1\u0151\1\0\3\u0151\6\0\2\u0151\1\7\1\u0153\24\0"+
    "\3\u0151\1\0\1\u0151\2\0\2\u0151\2\0\1\u0151\1\7"+
    "\3\u0151\1\7\5\0\2\u0154\1\0\1\u0154\24\0\3\u0154"+
    "\1\0\1\u0154\2\0\2\u0154\2\0\1\u0154\1\0\3\u0154"+
    "\4\0\2\3\1\u0154\1\u0155\1\0\1\u0154\24\3\3\u0154"+
    "\1\0\1\u0154\2\0\2\u0154\2\0\1\u0154\1\0\3\u0154"+
    "\6\0\2\u0154\1\7\1\u0156\24\0\3\u0154\1\0\1\u0154"+
    "\2\0\2\u0154\2\0\1\u0154\1\7\3\u0154\1\7\5\0"+
    "\2\u0157\1\0\1\u0157\24\0\3\u0157\1\0\1\u0157\2\0"+
    "\2\u0157\2\0\1\u0157\1\0\3\u0157\4\0\2\3\1\u0157"+
    "\1\u0158\1\0\1\u0157\24\3\3\u0157\1\0\1\u0157\2\0"+
    "\2\u0157\2\0\1\u0157\1\0\3\u0157\6\0\2\u0157\1\7"+
    "\1\u0159\24\0\3\u0157\1\0\1\u0157\2\0\2\u0157\2\0"+
    "\1\u0157\1\7\3\u0157\1\7\5\0\2\u015a\1\0\1\u015a"+
    "\24\0\3\u015a\1\0\1\u015a\2\0\2\u015a\2\0\1\u015a"+
    "\1\0\3\u015a\4\0\2\3\1\u015a\1\u015b\1\0\1\u015a"+
    "\24\3\3\u015a\1\0\1\u015a\2\0\2\u015a\2\0\1\u015a"+
    "\1\0\3\u015a\6\0\2\u015a\1\7\1\u015c\24\0\3\u015a"+
    "\1\0\1\u015a\2\0\2\u015a\2\0\1\u015a\1\7\3\u015a"+
    "\1\7\5\0\2\u015d\1\0\1\u015d\24\0\3\u015d\1\0"+
    "\1\u015d\2\0\2\u015d\2\0\1\u015d\1\0\3\u015d\4\0"+
    "\2\3\1\u015d\1\u015e\1\0\1\u015d\24\3\3\u015d\1\0"+
    "\1\u015d\2\0\2\u015d\2\0\1\u015d\1\0\3\u015d\6\0"+
    "\2\u015d\1\7\1\u015f\24\0\3\u015d\1\0\1\u015d\2\0"+
    "\2\u015d\2\0\1\u015d\1\7\3\u015d\1\7\5\0\2\u0160"+
    "\1\0\1\u0160\24\0\3\u0160\1\0\1\u0160\2\0\2\u0160"+
    "\2\0\1\u0160\1\0\3\u0160\4\0\2\3\1\u0160\1\u0161"+
    "\1\0\1\u0160\24\3\3\u0160\1\0\1\u0160\2\0\2\u0160"+
    "\2\0\1\u0160\1\0\3\u0160\6\0\2\u0160\1\7\1\u0162"+
    "\24\0\3\u0160\1\0\1\u0160\2\0\2\u0160\2\0\1\u0160"+
    "\1\7\3\u0160\1\7\5\0\2\u0163\1\0\1\u0163\24\0"+
    "\3\u0163\1\0\1\u0163\2\0\2\u0163\2\0\1\u0163\1\0"+
    "\3\u0163\4\0\2\3\1\u0163\1\u0164\1\0\1\u0163\24\3"+
    "\3\u0163\1\0\1\u0163\2\0\2\u0163\2\0\1\u0163\1\0"+
    "\3\u0163\6\0\2\u0163\1\7\1\u0165\24\0\3\u0163\1\0"+
    "\1\u0163\2\0\2\u0163\2\0\1\u0163\1\7\3\u0163\1\7"+
    "\5\0\2\u0166\1\0\1\u0166\24\0\3\u0166\1\0\1\u0166"+
    "\2\0\2\u0166\2\0\1\u0166\1\0\3\u0166\4\0\2\3"+
    "\1\u0166\1\u0167\1\0\1\u0166\24\3\3\u0166\1\0\1\u0166"+
    "\2\0\2\u0166\2\0\1\u0166\1\0\3\u0166\6\0\2\u0166"+
    "\1\7\1\u0168\24\0\3\u0166\1\0\1\u0166\2\0\2\u0166"+
    "\2\0\1\u0166\1\7\3\u0166\1\7\5\0\2\u0169\1\0"+
    "\1\u0169\24\0\3\u0169\1\0\1\u0169\2\0\2\u0169\2\0"+
    "\1\u0169\1\0\3\u0169\4\0\2\3\1\u0169\1\u016a\1\0"+
    "\1\u0169\24\3\3\u0169\1\0\1\u0169\2\0\2\u0169\2\0"+
    "\1\u0169\1\0\3\u0169\6\0\2\u0169\1\7\1\u016b\24\0"+
    "\3\u0169\1\0\1\u0169\2\0\2\u0169\2\0\1\u0169\1\7"+
    "\3\u0169\1\7\5\0\2\u016c\1\0\1\u016c\24\0\3\u016c"+
    "\1\0\1\u016c\2\0\2\u016c\2\0\1\u016c\1\0\3\u016c"+
    "\4\0\2\3\1\u016c\1\u016d\1\0\1\u016c\24\3\3\u016c"+
    "\1\0\1\u016c\2\0\2\u016c\2\0\1\u016c\1\0\3\u016c"+
    "\6\0\2\u016c\1\7\1\u016e\24\0\3\u016c\1\0\1\u016c"+
    "\2\0\2\u016c\2\0\1\u016c\1\7\3\u016c\1\7\5\0"+
    "\2\u016f\1\0\1\u016f\24\0\3\u016f\1\0\1\u016f\2\0"+
    "\2\u016f\2\0\1\u016f\1\0\3\u016f\4\0\2\3\1\u016f"+
    "\1\u0170\1\0\1\u016f\24\3\3\u016f\1\0\1\u016f\2\0"+
    "\2\u016f\2\0\1\u016f\1\0\3\u016f\6\0\2\u016f\1\7"+
    "\1\u0171\24\0\3\u016f\1\0\1\u016f\2\0\2\u016f\2\0"+
    "\1\u016f\1\7\3\u016f\1\7\5\0\2\u0172\1\0\1\u0172"+
    "\24\0\3\u0172\1\0\1\u0172\2\0\2\u0172\2\0\1\u0172"+
    "\1\0\3\u0172\4\0\2\3\1\u0172\1\u0173\1\0\1\u0172"+
    "\24\3\3\u0172\1\0\1\u0172\2\0\2\u0172\2\0\1\u0172"+
    "\1\0\3\u0172\6\0\2\u0172\1\7\1\u0174\24\0\3\u0172"+
    "\1\0\1\u0172\2\0\2\u0172\2\0\1\u0172\1\7\3\u0172"+
    "\1\7\5\0\2\u0175\1\0\1\u0175\24\0\3\u0175\1\0"+
    "\1\u0175\2\0\2\u0175\2\0\1\u0175\1\0\3\u0175\4\0"+
    "\2\3\1\u0175\1\u0176\1\0\1\u0175\24\3\3\u0175\1\0"+
    "\1\u0175\2\0\2\u0175\2\0\1\u0175\1\0\3\u0175\6\0"+
    "\2\u0175\1\7\1\u0177\24\0\3\u0175\1\0\1\u0175\2\0"+
    "\2\u0175\2\0\1\u0175\1\7\3\u0175\1\7\5\0\2\u0178"+
    "\1\0\1\u0178\24\0\3\u0178\1\0\1\u0178\2\0\2\u0178"+
    "\2\0\1\u0178\1\0\3\u0178\4\0\2\3\1\u0178\1\u0179"+
    "\1\0\1\u0178\24\3\3\u0178\1\0\1\u0178\2\0\2\u0178"+
    "\2\0\1\u0178\1\0\3\u0178\6\0\2\u0178\1\7\1\u017a"+
    "\24\0\3\u0178\1\0\1\u0178\2\0\2\u0178\2\0\1\u0178"+
    "\1\7\3\u0178\1\7\5\0\2\u017b\1\0\1\u017b\24\0"+
    "\3\u017b\1\0\1\u017b\2\0\2\u017b\2\0\1\u017b\1\0"+
    "\3\u017b\4\0\2\3\1\u017b\1\u017c\1\0\1\u017b\24\3"+
    "\3\u017b\1\0\1\u017b\2\0\2\u017b\2\0\1\u017b\1\0"+
    "\3\u017b\6\0\2\u017b\1\7\1\u017d\24\0\3\u017b\1\0"+
    "\1\u017b\2\0\2\u017b\2\0\1\u017b\1\7\3\u017b\1\7"+
    "\5\0\2\u017e\1\0\1\u017e\24\0\3\u017e\1\0\1\u017e"+
    "\2\0\2\u017e\2\0\1\u017e\1\0\3\u017e\4\0\2\3"+
    "\1\u017e\1\u017f\1\0\1\u017e\24\3\3\u017e\1\0\1\u017e"+
    "\2\0\2\u017e\2\0\1\u017e\1\0\3\u017e\6\0\2\u017e"+
    "\1\7\1\u0180\24\0\3\u017e\1\0\1\u017e\2\0\2\u017e"+
    "\2\0\1\u017e\1\7\3\u017e\1\7\5\0\2\u0181\1\0"+
    "\1\u0181\24\0\3\u0181\1\0\1\u0181\2\0\2\u0181\2\0"+
    "\1\u0181\1\0\3\u0181\4\0\2\3\1\u0181\1\u0182\1\0"+
    "\1\u0181\24\3\3\u0181\1\0\1\u0181\2\0\2\u0181\2\0"+
    "\1\u0181\1\0\3\u0181\6\0\2\u0181\1\7\1\u0183\24\0"+
    "\3\u0181\1\0\1\u0181\2\0\2\u0181\2\0\1\u0181\1\7"+
    "\3\u0181\1\7\5\0\2\u0184\1\0\1\u0184\24\0\3\u0184"+
    "\1\0\1\u0184\2\0\2\u0184\2\0\1\u0184\1\0\3\u0184"+
    "\4\0\2\3\1\u0184\1\u0185\1\0\1\u0184\24\3\3\u0184"+
    "\1\0\1\u0184\2\0\2\u0184\2\0\1\u0184\1\0\3\u0184"+
    "\6\0\2\u0184\1\7\1\u0186\24\0\3\u0184\1\0\1\u0184"+
    "\2\0\2\u0184\2\0\1\u0184\1\7\3\u0184\1\7\5\0"+
    "\2\u0187\1\0\1\u0187\24\0\3\u0187\1\0\1\u0187\2\0"+
    "\2\u0187\2\0\1\u0187\1\0\3\u0187\4\0\2\3\1\u0187"+
    "\1\u0188\1\0\1\u0187\24\3\3\u0187\1\0\1\u0187\2\0"+
    "\2\u0187\2\0\1\u0187\1\0\3\u0187\6\0\2\u0187\1\7"+
    "\1\u0189\24\0\3\u0187\1\0\1\u0187\2\0\2\u0187\2\0"+
    "\1\u0187\1\7\3\u0187\1\7\5\0\2\u018a\1\0\1\u018a"+
    "\24\0\3\u018a\1\0\1\u018a\2\0\2\u018a\2\0\1\u018a"+
    "\1\0\3\u018a\4\0\2\3\1\u018a\1\u018b\1\0\1\u018a"+
    "\24\3\3\u018a\1\0\1\u018a\2\0\2\u018a\2\0\1\u018a"+
    "\1\0\3\u018a\6\0\2\u018a\1\7\1\u018c\24\0\3\u018a"+
    "\1\0\1\u018a\2\0\2\u018a\2\0\1\u018a\1\7\3\u018a"+
    "\1\7\5\0\2\u018d\1\0\1\u018d\24\0\3\u018d\1\0"+
    "\1\u018d\2\0\2\u018d\2\0\1\u018d\1\0\3\u018d\4\0"+
    "\2\3\1\u018d\1\u018e\1\0\1\u018d\24\3\3\u018d\1\0"+
    "\1\u018d\2\0\2\u018d\2\0\1\u018d\1\0\3\u018d\6\0"+
    "\2\u018d\1\7\1\u018f\24\0\3\u018d\1\0\1\u018d\2\0"+
    "\2\u018d\2\0\1\u018d\1\7\3\u018d\1\7\5\0\2\u0190"+
    "\1\0\1\u0190\24\0\3\u0190\1\0\1\u0190\2\0\2\u0190"+
    "\2\0\1\u0190\1\0\3\u0190\4\0\2\3\1\u0190\1\u0191"+
    "\1\0\1\u0190\24\3\3\u0190\1\0\1\u0190\2\0\2\u0190"+
    "\2\0\1\u0190\1\0\3\u0190\6\0\2\u0190\1\7\1\u0192"+
    "\24\0\3\u0190\1\0\1\u0190\2\0\2\u0190\2\0\1\u0190"+
    "\1\7\3\u0190\1\7\5\0\2\u0193\1\0\1\u0193\24\0"+
    "\3\u0193\1\0\1\u0193\2\0\2\u0193\2\0\1\u0193\1\0"+
    "\3\u0193\4\0\2\3\1\u0193\1\u0194\1\0\1\u0193\24\3"+
    "\3\u0193\1\0\1\u0193\2\0\2\u0193\2\0\1\u0193\1\0"+
    "\3\u0193\6\0\2\u0193\1\7\1\u0195\24\0\3\u0193\1\0"+
    "\1\u0193\2\0\2\u0193\2\0\1\u0193\1\7\3\u0193\1\7"+
    "\5\0\2\2\1\0\1\2\24\0\3\2\1\0\1\2"+
    "\2\0\2\2\2\0\1\2\1\0\3\2\4\0\2\3"+
    "\1\2\1\3\1\0\1\2\24\3\3\2\1\0\1\2"+
    "\2\0\2\2\2\0\1\2\1\0\3\2\6\0\2\2"+
    "\2\7\24\0\3\2\1\0\1\2\2\0\2\2\2\0"+
    "\1\2\1\7\3\2\1\7\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17802];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\25\1\1\11\1\1\2\11\2\1\2\11"+
    "\6\1\1\0\1\1\1\0\31\1\2\0\1\1\2\0"+
    "\26\1\1\0\1\1\1\11\14\1\1\0\12\1\1\11"+
    "\u011e\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[405];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    public int linea;
    public int columna;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 136) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 21: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Decremento;
          }
        case 26: 
            { linea=yyline; columna=yycolumn; lexeme=yytext(); return Coma;
          }
        case 10: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Operador_Division;
          }
        case 27: break;
        case 25: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Cadena;
          }
        case 28: break;
        case 24: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Comentario;
          }
        case 29: break;
        case 4: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Simbolo;
          }
        case 30: break;
        case 22: 
          { lexeme=yytext(); return Operador_Logico;
          }
        case 31: break;
        case 9: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Operador_Multiplicacion;
          }
        case 32: break;
        case 8: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Operador_Resta;
          }
        case 33: break;
        case 1: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Error;
          }
        case 34: break;
        case 6: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Operador_Asignacion;
          }
        case 35: break;
        case 7: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Operador_Suma;
          }
        case 36: break;
        case 12: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return LLave_Cierre;
          }
        case 37: break;
        case 17: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Terminador;
          }
        case 38: break;
        case 13: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Parentesis_Apertura;
          }
        case 39: break;
        case 19: 
          { linea=yyline; columna=yycolumn; lexeme=yytext();return Palabra_Reservada;
          }
        case 40: break;
        case 23: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Decimal_Real;
          }
        case 41: break;
        case 18: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Comparador;
          }
        case 42: break;
        case 14: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Parentesis_Cierre;
          }
        case 43: break;
        case 11: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return LLave_Apertura;
          }
        case 44: break;
        case 20: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Incremento;
          }
        case 45: break;
        case 3: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Entero_Real;
          }
        case 46: break;
        case 2: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Identificador;
          }
        case 47: break;
        case 16: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Corchete_Cierre;
          }
        case 48: break;
        case 15: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Corchete_Apertura;
          }
        case 49: break;
        case 5: 
          { /*Ignore*/
          }
        case 50: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
