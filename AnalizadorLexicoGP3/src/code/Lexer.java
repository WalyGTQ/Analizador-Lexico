/* The following code was generated by JFlex 1.4.3 on 23/04/22 01:21 */
package code;

import static code.Tokens.*;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3 on 23/04/22 01:21 from the
 * specification file
 * <tt>C:/Users/walyn/OneDrive/Documentos/NetBeansProjects/AnalizadorLexicoGP3/src/code/Lexer.flex</tt>
 */
class Lexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l at the
     * beginning of a line l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
        0, 1
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED
            = "\11\0\1\54\1\54\2\0\1\4\22\0\1\5\1\56\1\64\2\3"
            + "\1\43\1\61\1\63\1\46\1\47\1\41\1\37\1\5\1\40\1\53"
            + "\1\42\2\2\10\2\1\3\1\52\1\60\1\36\1\57\1\62\1\0"
            + "\1\1\1\1\30\1\1\50\1\0\1\51\1\56\1\1\1\0\1\11"
            + "\1\6\1\13\1\23\1\10\1\24\1\32\1\16\1\21\1\1\1\12"
            + "\1\25\1\34\1\20\1\17\1\30\1\1\1\7\1\14\1\15\1\22"
            + "\1\31\1\27\1\33\1\26\1\35\1\44\1\55\1\45\123\0\1\1"
            + "\37\0\1\1\uff0e\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0
            = "\2\0\1\1\1\2\1\3\1\4\1\5\20\2\1\6"
            + "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"
            + "\1\17\1\20\1\21\1\22\1\4\1\1\2\23\4\1"
            + "\1\3\1\7\1\10\1\4\1\1\1\0\26\2\2\24"
            + "\2\2\1\24\13\2\2\23\1\25\1\3\1\26\1\27"
            + "\2\0\1\30\4\0\1\1\1\0\1\25\1\0\1\3"
            + "\1\26\1\30\1\31\31\2\1\32\17\2\1\0\1\33"
            + "\1\34\1\35\1\0\13\2\1\36\3\2\1\37\10\2"
            + "\1\0\7\2\1\24\4\2\1\32\2\2\1\33\16\2";

    private static int[] zzUnpackAction() {
        int[] result = new int[210];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0
            = "\0\0\0\65\0\152\0\237\0\324\0\152\0\u0109\0\u013e"
            + "\0\u0173\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6"
            + "\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459\0\u048e"
            + "\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\152\0\152\0\152"
            + "\0\152\0\152\0\152\0\152\0\u05cc\0\u0597\0\u0601\0\u0636"
            + "\0\u066b\0\u06a0\0\u06d5\0\u070a\0\u073f\0\u0774\0\u07a9\0\u07de"
            + "\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986"
            + "\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e"
            + "\0\u0b63\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\u0ca1\0\u0cd6"
            + "\0\u0d0b\0\237\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49"
            + "\0\u0e7e\0\u0eb3\0\u0ee8\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1"
            + "\0\u0597\0\152\0\152\0\u1026\0\152\0\u0597\0\u105b\0\u1090"
            + "\0\u0597\0\u10c5\0\u0597\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce"
            + "\0\u11ce\0\u1203\0\u11ce\0\u1238\0\u0848\0\u126d\0\u12a2\0\u12d7"
            + "\0\u130c\0\u1341\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u144a\0\u147f"
            + "\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd\0\u15f2\0\u1627"
            + "\0\u165c\0\u1691\0\u16c6\0\u16fb\0\u1730\0\u1765\0\237\0\u179a"
            + "\0\u17cf\0\u1804\0\u1839\0\u186e\0\u18a3\0\u18d8\0\u190d\0\u1942"
            + "\0\u1977\0\u19ac\0\u19e1\0\u1a16\0\u1a4b\0\u1a80\0\u1ab5\0\u1090"
            + "\0\152\0\u1aea\0\u1b1f\0\u1b54\0\u1b89\0\u1bbe\0\u1bf3\0\u1c28"
            + "\0\u1c5d\0\u1c92\0\u1cc7\0\u1cfc\0\u1d31\0\u1d66\0\237\0\u1d9b"
            + "\0\u1dd0\0\u1e05\0\237\0\u1e3a\0\u1e6f\0\u1ea4\0\u1ed9\0\u1f0e"
            + "\0\u1f43\0\u1f78\0\u1fad\0\u1fe2\0\u2017\0\u204c\0\u2081\0\u20b6"
            + "\0\u20eb\0\u2120\0\u2155\0\u218a\0\u21bf\0\u21f4\0\u2229\0\u225e"
            + "\0\u2293\0\u22c8\0\u22fd\0\152\0\u2332\0\u2367\0\u239c\0\u23d1"
            + "\0\u2406\0\u243b\0\u2470\0\u24a5\0\u24da\0\u250f\0\u2544\0\u2579"
            + "\0\u25ae\0\u25e3";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[210];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0
            = "\1\3\1\4\1\5\1\6\2\7\1\10\1\11\1\12"
            + "\1\13\1\4\1\14\1\15\1\16\2\4\1\17\1\20"
            + "\1\4\1\21\1\22\1\23\1\24\1\25\1\4\1\26"
            + "\1\27\3\4\1\30\1\31\1\32\1\33\1\34\1\35"
            + "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\6"
            + "\1\7\1\45\1\46\1\47\1\50\1\51\1\52\1\53"
            + "\1\54\1\3\1\4\1\55\1\6\2\7\1\10\1\11"
            + "\1\12\1\13\1\4\1\14\1\15\1\16\2\4\1\17"
            + "\1\20\1\4\1\21\1\22\1\23\1\24\1\25\1\4"
            + "\1\26\1\27\3\4\1\30\1\56\1\57\1\33\1\34"
            + "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"
            + "\1\6\1\7\1\60\1\46\1\47\1\50\1\51\1\52"
            + "\1\53\1\54\66\0\2\4\3\0\30\4\30\0\1\61"
            + "\1\5\3\0\30\61\15\0\1\62\15\0\2\7\46\0"
            + "\1\7\11\0\2\4\3\0\1\4\1\63\7\4\1\64"
            + "\6\4\1\65\7\4\30\0\2\4\3\0\2\4\1\66"
            + "\25\4\30\0\2\4\3\0\12\4\1\67\4\4\1\70"
            + "\5\4\1\71\2\4\30\0\2\4\3\0\1\72\27\4"
            + "\30\0\2\4\3\0\3\4\1\73\4\4\1\74\1\75"
            + "\5\4\1\76\10\4\30\0\2\4\3\0\10\4\1\77"
            + "\3\4\1\100\3\4\1\101\1\102\6\4\30\0\2\4"
            + "\3\0\1\4\1\103\6\4\1\104\7\4\1\105\7\4"
            + "\30\0\2\4\3\0\2\4\1\106\1\107\10\4\1\110"
            + "\13\4\30\0\2\4\3\0\12\4\1\111\3\4\1\112"
            + "\7\4\1\113\1\4\30\0\2\4\3\0\2\4\1\114"
            + "\6\4\1\115\16\4\30\0\2\4\3\0\3\4\1\116"
            + "\5\4\1\117\1\4\1\120\1\121\2\4\1\122\10\4"
            + "\30\0\2\4\3\0\11\4\1\123\16\4\30\0\2\4"
            + "\3\0\13\4\1\124\14\4\30\0\2\4\3\0\10\4"
            + "\1\125\2\4\1\126\14\4\30\0\2\4\3\0\3\4"
            + "\1\117\5\4\1\127\16\4\30\0\2\4\3\0\11\4"
            + "\1\130\16\4\65\0\1\131\64\0\1\132\1\133\27\0"
            + "\1\134\33\0\1\132\1\0\1\135\62\0\1\132\2\0"
            + "\1\136\64\0\1\137\1\140\60\0\1\132\64\0\1\132"
            + "\16\0\1\141\45\0\1\132\20\0\1\142\43\0\1\132"
            + "\21\0\1\143\42\0\1\132\22\0\1\141\65\0\1\143"
            + "\3\0\3\144\1\0\34\144\1\0\12\144\1\0\1\144"
            + "\1\0\2\144\5\0\3\145\1\0\34\145\1\0\12\145"
            + "\1\0\1\145\1\0\2\145\5\0\1\61\1\55\3\0"
            + "\2\61\1\146\25\61\15\0\1\62\13\0\1\147\33\0"
            + "\1\132\1\150\1\151\14\0\1\151\11\0\1\152\33\0"
            + "\1\132\1\151\1\153\14\0\1\151\11\0\1\147\33\0"
            + "\1\132\2\151\14\0\1\154\10\0\1\61\4\0\30\61"
            + "\31\0\1\155\63\0\2\4\3\0\2\4\1\156\25\4"
            + "\30\0\2\4\3\0\11\4\1\157\16\4\30\0\2\4"
            + "\3\0\7\4\1\160\20\4\30\0\2\4\3\0\7\4"
            + "\1\161\20\4\30\0\2\4\3\0\14\4\1\162\13\4"
            + "\30\0\2\4\3\0\6\4\1\163\21\4\30\0\2\4"
            + "\3\0\7\4\1\164\12\4\1\165\5\4\30\0\2\4"
            + "\3\0\6\4\1\166\21\4\30\0\2\4\3\0\6\4"
            + "\1\163\1\167\20\4\30\0\2\4\3\0\3\4\1\170"
            + "\24\4\30\0\2\4\3\0\12\4\1\171\15\4\30\0"
            + "\2\4\3\0\3\4\1\172\24\4\30\0\2\4\3\0"
            + "\11\4\1\173\16\4\30\0\2\4\3\0\22\4\1\174"
            + "\5\4\30\0\2\4\3\0\12\4\1\175\15\4\30\0"
            + "\2\4\3\0\13\4\1\176\14\4\30\0\2\4\3\0"
            + "\3\4\1\177\10\4\1\200\3\4\1\112\7\4\30\0"
            + "\2\4\3\0\1\4\1\201\11\4\1\202\14\4\30\0"
            + "\2\4\3\0\22\4\1\203\5\4\30\0\2\4\3\0"
            + "\21\4\1\112\6\4\30\0\2\4\3\0\7\4\1\204"
            + "\20\4\30\0\2\4\3\0\17\4\1\205\10\4\30\0"
            + "\2\4\3\0\6\4\1\206\1\207\20\4\30\0\2\4"
            + "\3\0\22\4\1\165\5\4\30\0\2\4\3\0\1\210"
            + "\15\4\1\211\1\212\10\4\30\0\2\4\3\0\14\4"
            + "\1\213\13\4\30\0\2\4\3\0\17\4\1\214\10\4"
            + "\30\0\2\4\3\0\1\4\1\112\26\4\30\0\2\4"
            + "\3\0\12\4\1\215\15\4\30\0\2\4\3\0\12\4"
            + "\1\216\15\4\30\0\2\4\3\0\11\4\1\217\16\4"
            + "\30\0\2\4\3\0\12\4\1\220\15\4\30\0\2\4"
            + "\3\0\2\4\1\221\25\4\30\0\2\4\3\0\13\4"
            + "\1\222\14\4\30\0\2\4\3\0\7\4\1\223\20\4"
            + "\30\0\2\4\3\0\13\4\1\224\3\4\1\225\10\4"
            + "\30\0\2\4\3\0\7\4\1\226\20\4\31\0\1\134"
            + "\50\0\1\62\12\0\3\227\1\0\34\227\1\0\14\227"
            + "\1\0\2\227\5\0\3\230\1\0\34\230\1\0\12\230"
            + "\1\0\1\230\1\0\2\230\42\0\1\132\20\0\1\143"
            + "\6\0\3\144\1\0\34\144\1\0\12\144\1\0\1\144"
            + "\1\0\2\144\2\0\1\231\2\0\3\145\1\0\34\145"
            + "\1\0\12\145\1\0\1\145\1\0\2\145\3\0\1\231"
            + "\1\0\1\61\1\232\3\0\30\61\1\0\2\233\14\0"
            + "\1\233\11\0\1\147\5\0\1\233\56\0\1\147\34\0"
            + "\2\151\14\0\1\151\11\0\1\152\5\0\1\233\42\0"
            + "\1\62\13\0\1\147\33\0\1\132\2\151\14\0\1\151"
            + "\10\0\2\4\3\0\3\4\1\234\24\4\30\0\2\4"
            + "\3\0\17\4\1\235\10\4\30\0\2\4\3\0\2\4"
            + "\1\207\25\4\30\0\2\4\3\0\14\4\1\236\13\4"
            + "\30\0\2\4\3\0\26\4\1\112\1\4\30\0\2\4"
            + "\3\0\2\4\1\112\25\4\30\0\2\4\3\0\2\4"
            + "\1\237\25\4\30\0\2\4\3\0\11\4\1\240\16\4"
            + "\30\0\2\4\3\0\7\4\1\241\20\4\30\0\2\4"
            + "\3\0\5\4\1\223\22\4\30\0\2\4\3\0\1\4"
            + "\1\207\26\4\30\0\2\4\3\0\6\4\1\242\1\243"
            + "\20\4\30\0\2\4\3\0\6\4\1\202\21\4\30\0"
            + "\2\4\3\0\1\4\1\244\26\4\30\0\2\4\3\0"
            + "\2\4\1\117\25\4\30\0\2\4\3\0\5\4\1\245"
            + "\22\4\30\0\2\4\3\0\7\4\1\167\20\4\30\0"
            + "\2\4\3\0\12\4\1\246\15\4\30\0\2\4\3\0"
            + "\2\4\1\247\25\4\30\0\2\4\3\0\11\4\1\250"
            + "\16\4\30\0\2\4\3\0\6\4\1\112\21\4\30\0"
            + "\2\4\3\0\2\4\1\251\25\4\30\0\2\4\3\0"
            + "\13\4\1\252\14\4\30\0\2\4\3\0\17\4\1\253"
            + "\10\4\30\0\2\4\3\0\7\4\1\254\20\4\30\0"
            + "\2\4\3\0\14\4\1\255\13\4\30\0\2\4\3\0"
            + "\3\4\1\256\24\4\30\0\2\4\3\0\2\4\1\257"
            + "\25\4\30\0\2\4\3\0\1\260\27\4\30\0\2\4"
            + "\3\0\6\4\1\200\21\4\30\0\2\4\3\0\3\4"
            + "\1\261\24\4\30\0\2\4\3\0\5\4\1\262\22\4"
            + "\30\0\2\4\3\0\3\4\1\244\24\4\30\0\2\4"
            + "\3\0\24\4\1\207\3\4\30\0\2\4\3\0\17\4"
            + "\1\224\10\4\30\0\2\4\3\0\17\4\1\163\10\4"
            + "\30\0\2\4\3\0\10\4\1\112\17\4\30\0\2\4"
            + "\3\0\15\4\1\112\12\4\30\0\2\4\3\0\3\4"
            + "\1\263\24\4\30\0\2\4\3\0\11\4\1\207\16\4"
            + "\30\0\3\227\1\0\34\227\1\264\14\227\1\0\2\227"
            + "\6\0\1\232\64\0\1\232\34\0\2\233\14\0\1\233"
            + "\10\0\2\4\3\0\4\4\1\112\23\4\30\0\2\4"
            + "\3\0\2\4\1\265\25\4\30\0\2\4\3\0\1\4"
            + "\1\266\26\4\30\0\2\4\3\0\12\4\1\267\15\4"
            + "\30\0\2\4\3\0\1\4\1\242\26\4\30\0\2\4"
            + "\3\0\1\4\1\270\26\4\30\0\2\4\3\0\7\4"
            + "\1\112\20\4\30\0\2\4\3\0\13\4\1\271\14\4"
            + "\30\0\2\4\3\0\7\4\1\207\20\4\30\0\2\4"
            + "\3\0\10\4\1\272\17\4\30\0\2\4\3\0\6\4"
            + "\1\273\21\4\30\0\2\4\3\0\21\4\1\274\6\4"
            + "\30\0\2\4\3\0\11\4\1\275\16\4\30\0\2\4"
            + "\3\0\23\4\1\160\4\4\30\0\2\4\3\0\3\4"
            + "\1\276\24\4\30\0\2\4\3\0\24\4\1\277\3\4"
            + "\30\0\2\4\3\0\14\4\1\300\13\4\30\0\2\4"
            + "\3\0\7\4\1\163\20\4\30\0\2\4\3\0\17\4"
            + "\1\160\10\4\30\0\2\4\3\0\17\4\1\301\10\4"
            + "\30\0\2\4\3\0\7\4\1\302\20\4\30\0\2\4"
            + "\3\0\7\4\1\303\20\4\71\0\1\304\23\0\2\4"
            + "\3\0\3\4\1\305\24\4\30\0\2\4\3\0\12\4"
            + "\1\112\15\4\30\0\2\4\3\0\15\4\1\202\12\4"
            + "\30\0\2\4\3\0\3\4\1\306\24\4\30\0\2\4"
            + "\3\0\12\4\1\307\15\4\30\0\2\4\3\0\1\4"
            + "\1\310\26\4\30\0\2\4\3\0\13\4\1\311\14\4"
            + "\30\0\2\4\3\0\6\4\1\207\21\4\30\0\2\4"
            + "\3\0\16\4\1\112\11\4\30\0\2\4\3\0\12\4"
            + "\1\312\15\4\30\0\2\4\3\0\24\4\1\174\3\4"
            + "\30\0\2\4\3\0\17\4\1\242\10\4\30\0\2\4"
            + "\3\0\17\4\1\313\10\4\30\0\2\4\3\0\13\4"
            + "\1\314\14\4\30\0\2\4\3\0\13\4\1\260\14\4"
            + "\30\0\2\4\3\0\12\4\1\207\15\4\30\0\2\4"
            + "\3\0\5\4\1\244\22\4\30\0\2\4\3\0\14\4"
            + "\1\163\13\4\30\0\2\4\3\0\11\4\1\315\16\4"
            + "\30\0\2\4\3\0\2\4\1\316\25\4\30\0\2\4"
            + "\3\0\5\4\1\203\22\4\30\0\2\4\3\0\20\4"
            + "\1\112\7\4\30\0\2\4\3\0\11\4\1\266\16\4"
            + "\30\0\2\4\3\0\12\4\1\317\15\4\30\0\2\4"
            + "\3\0\12\4\1\244\15\4\30\0\2\4\3\0\13\4"
            + "\1\320\14\4\30\0\2\4\3\0\27\4\1\321\30\0"
            + "\2\4\3\0\2\4\1\322\25\4\30\0\2\4\3\0"
            + "\15\4\1\207\12\4\27\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[9752];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
        "Unkown internal scanner error",
        "Error: could not match input",
        "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0
            = "\2\0\1\11\2\1\1\11\27\1\7\11\15\1\1\0"
            + "\47\1\2\11\1\1\1\11\1\1\2\0\1\1\4\0"
            + "\1\1\1\0\1\1\1\0\55\1\1\0\1\1\1\11"
            + "\1\1\1\0\30\1\1\0\17\1\1\11\16\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[210];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is the source of
     * the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read from
     * input
     */
    private int zzEndRead;

    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;

    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /* user code: */
    public String lexeme;
    public int linea;
    public int columna;

    /**
     * Creates a new scanner There is also a java.io.InputStream version of this
     * constructor.
     *
     * @param in the java.io.Reader to read input from.
     */
    Lexer(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Creates a new scanner. There is also java.io.Reader version of this
     * constructor.
     *
     * @param in the java.io.Inputstream to read input from.
     */
    Lexer(java.io.InputStream in) {
        this(new java.io.InputStreamReader(in));
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x10000];
        int i = 0;
        /* index in packed string  */
        int j = 0;
        /* index in unpacked array */
        while (i < 146) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do {
                map[j++] = value;
            } while (--count > 0);
        }
        return map;
    }

    /**
     * Refills the input buffer.
     *
     * @return      <code>false</code>, iff there was new input.
     *
     * @exception java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzCurrentPos * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
        }

        /* finally: fill the buffer with new input */
        int numRead = zzReader.read(zzBuffer, zzEndRead,
                zzBuffer.length - zzEndRead);

        if (numRead > 0) {
            zzEndRead += numRead;
            return false;
        }
        // unlikely but not impossible: read 0 characters, but not at end of stream    
        if (numRead == 0) {
            int c = zzReader.read();
            if (c == -1) {
                return true;
            } else {
                zzBuffer[zzEndRead++] = (char) c;
                return false;
            }
        }

        // numRead < 0
        return true;
    }

    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;
        /* indicate end of file */
        zzEndRead = zzStartRead;
        /* invalidate buffer    */

        if (zzReader != null) {
            zzReader.close();
        }
    }

    /**
     * Resets the scanner to read from a new input stream. Does not close the
     * old reader.
     *
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost). Lexical
     * state is set to <tt>ZZ_INITIAL</tt>.
     *
     * @param reader the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
    }

    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }

    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }

    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    /**
     * Returns the character at position <tt>pos</tt> from the matched text.
     *
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch. A value from 0 to
     * yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }

    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }

    /**
     * Reports an error that occured while scanning.
     *
     * In a wellformed scanner (no or only correct usage of yypushback(int) and
     * a match-all fallback rule) this method will only be called with things
     * that "Can't Possibly Happen". If this method is called, something is
     * seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done in error
     * fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again. This number must
     * not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength()) {
            zzScanError(ZZ_PUSHBACK_2BIG);
        }

        zzMarkedPos -= number;
    }

    /**
     * Resumes scanning until the next regular expression is matched, the end of
     * input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @exception java.io.IOException if any I/O-Error occurs
     */
    public Tokens yylex() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            boolean zzR = false;
            for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                    zzCurrentPosL++) {
                switch (zzBufferL[zzCurrentPosL]) {
                    case '\u000B':
                    case '\u000C':
                    case '\u0085':
                    case '\u2028':
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR) {
                            zzR = false;
                        } else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn++;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL) {
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                } else if (zzAtEOF) {
                    zzPeek = false;
                } else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof) {
                        zzPeek = false;
                    } else {
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                    }
                }
                if (zzPeek) {
                    yyline--;
                }
            }
            if (zzMarkedPosL > zzStartRead) {
                switch (zzBufferL[zzMarkedPosL - 1]) {
                    case '\n':
                    case '\u000B':
                    case '\u000C':
                    case '\u0085':
                    case '\u2028':
                    case '\u2029':
                        zzAtBOL = true;
                        break;
                    case '\r':
                        if (zzMarkedPosL < zzEndReadL) {
                            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
                        } else if (zzAtEOF) {
                            zzAtBOL = false;
                        } else {
                            boolean eof = zzRefill();
                            zzMarkedPosL = zzMarkedPos;
                            zzEndReadL = zzEndRead;
                            zzBufferL = zzBuffer;
                            if (eof) {
                                zzAtBOL = false;
                            } else {
                                zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
                            }
                        }
                        break;
                    default:
                        zzAtBOL = false;
                }
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            if (zzAtBOL) {
                zzState = ZZ_LEXSTATE[zzLexicalState + 1];
            } else {
                zzState = ZZ_LEXSTATE[zzLexicalState];
            }

            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = zzBufferL[zzCurrentPosL++];
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = zzBufferL[zzCurrentPosL++];
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) {
                        break zzForAction;
                    }
                    zzState = zzNext;

                    int zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) {
                            break zzForAction;
                        }
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 30: {
                    linea = yyline;
                    columna = yycolumn;
                    lexeme = yytext();
                    return Boleano;
                }
                case 32:
                    break;
                case 22: {
                    linea = yyline;
                    columna = yycolumn;
                    lexeme = yytext();
                    return Decremento;
                }
                case 33:
                    break;
                case 10: {
                    linea = yyline;
                    columna = yycolumn;
                    lexeme = yytext();
                    return Operador_Division;
                }
                case 34:
                    break;
                case 28: {
                    linea = yyline;
                    columna = yycolumn;
                    lexeme = yytext();
                    return Cadena;
                }
                case 35:
                    break;
                case 27: {
                    linea = yyline;
                    columna = yycolumn;
                    lexeme = yytext();
                    return Comentario;
                }
                case 36:
                    break;
                case 4: {
                    linea = yyline;
                    columna = yycolumn;
                    lexeme = yytext();
                    return Simbolo;
                }
                case 37:
                    break;
                case 24: {
                    lexeme = yytext();
                    return Operador_Logico;
                }
                case 38:
                    break;
                case 9: {
                    linea = yyline;
                    columna = yycolumn;
                    lexeme = yytext();
                    return Operador_Multiplicacion;
                }
                case 39:
                    break;
                case 8: {
                    linea = yyline;
                    columna = yycolumn;
                    lexeme = yytext();
                    return Operador_Resta;
                }
                case 40:
                    break;
                case 1: {
                    linea = yyline;
                    columna = yycolumn;
                    lexeme = yytext();
                    return Error;
                }
                case 41:
                    break;
                case 6: {
                    linea = yyline;
                    columna = yycolumn;
                    lexeme = yytext();
                    return Operador_Asignacion;
                }
                case 42:
                    break;
                case 7: {
                    linea = yyline;
                    columna = yycolumn;
                    lexeme = yytext();
                    return Operador_Suma;
                }
                case 43:
                    break;
                case 31: {
                    linea = yyline;
                    columna = yycolumn;
                    lexeme = yytext();
                    return Vacio;
                }
                case 44:
                    break;
                case 18: {
                    linea = yyline;
                    columna = yycolumn;
                    lexeme = yytext();
                    return Terminador;
                }
                case 45:
                    break;
                case 13: {
                    linea = yyline;
                    columna = yycolumn;
                    lexeme = yytext();
                    return LLave_Cierre;
                }
                case 46:
                    break;
                case 14: {
                    linea = yyline;
                    columna = yycolumn;
                    lexeme = yytext();
                    return Parentesis_Apertura;
                }
                case 47:
                    break;
                case 20: {
                    linea = yyline;
                    columna = yycolumn;
                    lexeme = yytext();
                    return Palabra_Reservada;
                }
                case 48:
                    break;
                case 25: {
                    linea = yyline;
                    columna = yycolumn;
                    lexeme = yytext();
                    return Decimal_Real;
                }
                case 49:
                    break;
                case 26: {
                    linea = yyline;
                    columna = yycolumn;
                    lexeme = yytext();
                    return ClaveReservada;
                }
                case 50:
                    break;
                case 19: {
                    linea = yyline;
                    columna = yycolumn;
                    lexeme = yytext();
                    return Comparador;
                }
                case 51:
                    break;
                case 15: {
                    linea = yyline;
                    columna = yycolumn;
                    lexeme = yytext();
                    return Parentesis_Cierre;
                }
                case 52:
                    break;
                case 12: {
                    linea = yyline;
                    columna = yycolumn;
                    lexeme = yytext();
                    return LLave_Apertura;
                }
                case 53:
                    break;
                case 23: {
                    linea = yyline;
                    columna = yycolumn;
                    lexeme = yytext();
                    return Potencia;
                }
                case 54:
                    break;
                case 21: {
                    linea = yyline;
                    columna = yycolumn;
                    lexeme = yytext();
                    return Incremento;
                }
                case 55:
                    break;
                case 3: {
                    linea = yyline;
                    columna = yycolumn;
                    lexeme = yytext();
                    return Entero_Real;
                }
                case 56:
                    break;
                case 11: {
                    linea = yyline;
                    columna = yycolumn;
                    lexeme = yytext();
                    return Operador_Residuo;
                }
                case 57:
                    break;
                case 2: {
                    linea = yyline;
                    columna = yycolumn;
                    lexeme = yytext();
                    return Identificador;
                }
                case 58:
                    break;
                case 29: {
                    linea = yyline;
                    columna = yycolumn;
                    lexeme = yytext();
                    return NotacionCientifica;
                }
                case 59:
                    break;
                case 17: {
                    linea = yyline;
                    columna = yycolumn;
                    lexeme = yytext();
                    return Corchete_Cierre;
                }
                case 60:
                    break;
                case 16: {
                    linea = yyline;
                    columna = yycolumn;
                    lexeme = yytext();
                    return Corchete_Apertura;
                }
                case 61:
                    break;
                case 5: {
                    /*Ignore*/
                }
                case 62:
                    break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        return null;
                    } else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }

}

