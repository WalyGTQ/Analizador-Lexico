/* The following code was generated by JFlex 1.4.3 on 20/04/22 00:19 */

package code;
import static code.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 20/04/22 00:19 from the specification file
 * <tt>C:/Users/walyn/OneDrive/Documentos/NetBeansProjects/AnalizadorLexicoGP3/src/code/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\54\1\50\2\0\1\5\22\0\1\6\1\0\1\56\3\3"+
    "\1\52\1\55\1\42\1\43\1\36\1\34\1\47\1\35\1\3\1\37"+
    "\12\2\1\3\1\46\1\51\1\33\1\51\2\0\32\1\1\44\1\0"+
    "\1\45\1\0\1\4\1\0\1\12\1\7\1\14\1\24\1\11\1\25"+
    "\1\1\1\17\1\22\1\1\1\13\1\26\1\1\1\21\1\20\1\31"+
    "\1\1\1\10\1\15\1\16\1\23\1\32\1\30\1\1\1\27\1\1"+
    "\1\40\1\53\1\41\123\0\1\1\37\0\1\1\uff0e\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\2\2\5\14\2"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\2\4\2\1\1\0"+
    "\1\1\1\0\1\2\1\5\12\2\2\23\7\2\1\22"+
    "\1\24\1\3\1\25\2\0\1\26\1\27\2\0\1\30"+
    "\2\1\1\2\1\5\21\2\1\0\1\31\1\32\1\1"+
    "\1\2\1\5\11\2\1\0\1\1\1\2\1\5\7\2"+
    "\1\31\1\1\1\2\1\5\4\2\1\1\1\2\1\5"+
    "\1\1\1\2\1\5\1\1\1\2\1\5\1\1\1\2"+
    "\1\5\1\1\1\2\1\5\1\1\1\2\1\5\1\1"+
    "\1\2\1\5\1\1\1\2\1\5\1\1\1\2\1\5"+
    "\1\1\1\2\1\5\1\1\1\2\1\5\1\1\1\2"+
    "\1\5\1\1\1\2\1\5\1\1\1\2\1\5\1\1"+
    "\1\2\1\5\1\1\1\2\1\5\1\1\1\2\1\5"+
    "\1\1\1\2\1\5\1\1\1\2\1\5\1\1\1\2"+
    "\1\5\1\1\1\2\1\5\1\1\1\2\1\5\1\1"+
    "\1\2\1\5\1\1\1\2\1\5\1\1\1\2\1\5"+
    "\1\1\1\2\1\5\1\1\1\2\1\5\1\1\1\2"+
    "\1\5\1\1\1\2\1\5\1\1\1\2\1\5\1\1"+
    "\1\2\1\5\1\1\1\2\1\5\1\1\1\2\1\5"+
    "\1\1\1\2\1\5\1\1\1\2\1\5\1\1\1\2"+
    "\1\5\1\1\1\2\1\5\1\1\1\2\1\5\1\1"+
    "\1\2\1\5\1\1\1\2\1\5\1\1\1\2\1\5"+
    "\1\1\1\2\1\5\1\1\1\2\1\5\1\1\1\2"+
    "\1\5\1\1\1\2\1\5\1\1\1\2\1\5\1\1"+
    "\1\2\1\5\1\1\1\2\1\5\1\1\1\2\1\5"+
    "\1\1\1\2\1\5\1\1\1\2\1\5\1\1\1\2"+
    "\1\5\1\1\1\2\1\5\1\1\1\2\1\5\1\1"+
    "\1\2\1\5\1\1\1\2\1\5\1\1\1\2\1\5"+
    "\1\1\1\2\1\5\1\1\1\2\1\5\1\1\1\2"+
    "\1\5\1\1\1\2\1\5\1\1\1\2\1\5\1\1"+
    "\1\2\1\5\1\1\1\2\1\5\1\1\1\2\1\5"+
    "\1\1\1\2\1\5\1\1\1\2\1\5\1\1\1\2"+
    "\1\5\1\1\1\2\1\5\1\1\1\2\1\5\1\1"+
    "\1\2\1\5\1\1\1\2\1\5\1\1\1\2\1\5"+
    "\1\1\1\2\1\5\1\1\1\2\1\5\1\1\1\2"+
    "\1\5\1\1\1\2\1\5\1\1\1\2\1\5\1\1"+
    "\1\2\1\5\1\1\1\2\1\5\1\1\1\2\1\5"+
    "\1\1\1\2\1\5\1\1\1\2\1\5\1\1\1\2"+
    "\1\5\1\1\1\2\1\5\1\1\1\2\1\5\1\1"+
    "\1\2\1\5\1\1\1\2\1\5\1\1\1\2\1\5"+
    "\1\1\1\2\1\5\1\1\1\2\1\5\1\1\1\2"+
    "\1\5\1\1\1\2\1\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[406];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\u0149"+
    "\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292\0\u02c1"+
    "\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db\0\u040a\0\57"+
    "\0\u0439\0\57\0\57\0\274\0\274\0\57\0\57\0\274"+
    "\0\u03ac\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u0524\0\u0553\0\u0582"+
    "\0\u05b1\0\u05e0\0\u060f\0\u063e\0\u066d\0\u069c\0\u06cb\0\u06fa"+
    "\0\u0729\0\u0758\0\u0787\0\u07b6\0\u07e5\0\136\0\u0814\0\u0843"+
    "\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u092e\0\u0582\0\u0582\0\u095d"+
    "\0\u0582\0\u098c\0\u09bb\0\u0582\0\u0582\0\u09ea\0\u0a19\0\u0524"+
    "\0\u0a48\0\u0a77\0\u0aa6\0\u0ad5\0\u0b04\0\u0b33\0\u0b62\0\u0b91"+
    "\0\u0bc0\0\u0bef\0\u0c1e\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda\0\u0d09"+
    "\0\u0d38\0\u0d67\0\u0d96\0\u0dc5\0\u0df4\0\u0e23\0\u09bb\0\57"+
    "\0\u0e52\0\u0e81\0\u0eb0\0\u0edf\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b"+
    "\0\u0fca\0\u0ff9\0\u1028\0\u1057\0\u1086\0\u10b5\0\u10e4\0\u1113"+
    "\0\u1142\0\u1171\0\u11a0\0\u11cf\0\u11fe\0\u122d\0\u125c\0\57"+
    "\0\u128b\0\u12ba\0\u12e9\0\u1318\0\u1347\0\u1376\0\u13a5\0\u13d4"+
    "\0\u1403\0\u1432\0\u1461\0\u1490\0\u14bf\0\u14ee\0\u151d\0\u154c"+
    "\0\u157b\0\u15aa\0\u15d9\0\u1608\0\u1637\0\u1666\0\u1695\0\u16c4"+
    "\0\u16f3\0\u1722\0\u1751\0\u1780\0\u17af\0\u17de\0\u180d\0\u183c"+
    "\0\u186b\0\u189a\0\u18c9\0\u18f8\0\u1927\0\u1956\0\u1985\0\u19b4"+
    "\0\u19e3\0\u1a12\0\u1a41\0\u1a70\0\u1a9f\0\u1ace\0\u1afd\0\u1b2c"+
    "\0\u1b5b\0\u1b8a\0\u1bb9\0\u1be8\0\u1c17\0\u1c46\0\u1c75\0\u1ca4"+
    "\0\u1cd3\0\u1d02\0\u1d31\0\u1d60\0\u1d8f\0\u1dbe\0\u1ded\0\u1e1c"+
    "\0\u1e4b\0\u1e7a\0\u1ea9\0\u1ed8\0\u1f07\0\u1f36\0\u1f65\0\u1f94"+
    "\0\u1fc3\0\u1ff2\0\u2021\0\u2050\0\u207f\0\u20ae\0\u20dd\0\u210c"+
    "\0\u213b\0\u216a\0\u2199\0\u21c8\0\u21f7\0\u2226\0\u2255\0\u2284"+
    "\0\u22b3\0\u22e2\0\u2311\0\u2340\0\u236f\0\u239e\0\u23cd\0\u23fc"+
    "\0\u242b\0\u245a\0\u2489\0\u24b8\0\u24e7\0\u2516\0\u2545\0\u2574"+
    "\0\u25a3\0\u25d2\0\u2601\0\u2630\0\u265f\0\u268e\0\u26bd\0\u26ec"+
    "\0\u271b\0\u274a\0\u2779\0\u27a8\0\u27d7\0\u2806\0\u2835\0\u2864"+
    "\0\u2893\0\u28c2\0\u28f1\0\u2920\0\u294f\0\u297e\0\u29ad\0\u29dc"+
    "\0\u2a0b\0\u2a3a\0\u2a69\0\u2a98\0\u2ac7\0\u2af6\0\u2b25\0\u2b54"+
    "\0\u2b83\0\u2bb2\0\u2be1\0\u2c10\0\u2c3f\0\u2c6e\0\u2c9d\0\u2ccc"+
    "\0\u2cfb\0\u2d2a\0\u2d59\0\u2d88\0\u2db7\0\u2de6\0\u2e15\0\u2e44"+
    "\0\u2e73\0\u2ea2\0\u2ed1\0\u2f00\0\u2f2f\0\u2f5e\0\u2f8d\0\u2fbc"+
    "\0\u2feb\0\u301a\0\u3049\0\u3078\0\u30a7\0\u30d6\0\u3105\0\u3134"+
    "\0\u3163\0\u3192\0\u31c1\0\u31f0\0\u321f\0\u324e\0\u327d\0\u32ac"+
    "\0\u32db\0\u330a\0\u3339\0\u3368\0\u3397\0\u33c6\0\u33f5\0\u3424"+
    "\0\u3453\0\u3482\0\u34b1\0\u34e0\0\u350f\0\u353e\0\u356d\0\u359c"+
    "\0\u35cb\0\u35fa\0\u3629\0\u3658\0\u3687\0\u36b6\0\u36e5\0\u3714"+
    "\0\u3743\0\u3772\0\u37a1\0\u37d0\0\u37ff\0\u382e\0\u385d\0\u388c"+
    "\0\u38bb\0\u38ea\0\u3919\0\u3948\0\u3977\0\u39a6\0\u39d5\0\u3a04"+
    "\0\u3a33\0\u3a62\0\u3a91\0\u3ac0\0\u3aef\0\u3b1e\0\u3b4d\0\u3b7c"+
    "\0\u3bab\0\u3bda\0\u3c09\0\u3c38\0\u3c67\0\u3c96\0\u3cc5\0\u3cf4"+
    "\0\u3d23\0\u3d52\0\u3d81\0\u3db0\0\u3ddf\0\u3e0e\0\u3e3d\0\u3e6c"+
    "\0\u3e9b\0\u3eca\0\u3ef9\0\u3f28\0\u3f57\0\u3f86\0\u3fb5\0\u3fe4"+
    "\0\u4013\0\u4042\0\u4071\0\u40a0\0\u40cf\0\u40fe\0\u412d\0\u415c"+
    "\0\u418b\0\u41ba\0\u41e9\0\u4218\0\u4247\0\u4276\0\u42a5\0\u42d4"+
    "\0\u4303\0\u4332\0\u4361\0\u4390\0\u43bf\0\u43ee\0\u441d\0\u444c"+
    "\0\u447b\0\u44aa\0\u44d9\0\u4508\0\u4537\0\u4566\0\u4595\0\u45c4"+
    "\0\u45f3\0\u4622\0\u4651\0\u4680\0\u46af\0\u46de";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[406];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\2\3\1\14\1\15\1\16\2\3\1\17"+
    "\1\20\1\3\1\21\1\22\2\3\1\23\1\3\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\10\1\7\1\41\1\42"+
    "\1\43\1\7\1\44\1\45\60\0\2\3\1\0\1\3"+
    "\2\0\24\3\24\0\1\46\1\47\1\4\1\46\1\47"+
    "\2\46\24\47\15\46\1\0\6\46\3\0\2\50\1\0"+
    "\1\50\24\0\3\50\1\0\1\50\2\0\2\50\2\0"+
    "\2\50\1\0\3\50\4\0\2\3\1\50\1\51\1\0"+
    "\1\50\24\3\3\50\1\0\1\50\2\0\2\50\2\0"+
    "\2\50\1\0\3\50\10\0\2\7\40\0\2\7\3\0"+
    "\1\7\5\0\2\50\1\7\1\52\24\0\3\50\1\0"+
    "\1\50\2\0\2\50\2\0\1\50\1\52\1\7\3\50"+
    "\1\7\3\0\2\3\1\0\1\3\2\0\1\3\1\53"+
    "\22\3\25\0\2\3\1\0\1\3\2\0\2\3\1\54"+
    "\21\3\25\0\2\3\1\0\1\3\2\0\17\3\1\55"+
    "\4\3\25\0\2\3\1\0\1\3\2\0\3\3\1\56"+
    "\5\3\1\57\12\3\25\0\2\3\1\0\1\3\2\0"+
    "\21\3\1\60\2\3\25\0\2\3\1\0\1\3\2\0"+
    "\1\3\1\61\6\3\1\62\7\3\1\63\3\3\25\0"+
    "\2\3\1\0\1\3\2\0\2\3\1\64\21\3\25\0"+
    "\2\3\1\0\1\3\2\0\12\3\1\65\3\3\1\66"+
    "\5\3\25\0\2\3\1\0\1\3\2\0\2\3\1\67"+
    "\6\3\1\66\12\3\25\0\2\3\1\0\1\3\2\0"+
    "\11\3\1\70\1\3\1\71\1\72\7\3\25\0\2\3"+
    "\1\0\1\3\2\0\10\3\1\73\2\3\1\74\10\3"+
    "\25\0\2\3\1\0\1\3\2\0\3\3\1\70\5\3"+
    "\1\75\12\3\27\0\2\50\1\0\1\50\24\0\1\76"+
    "\2\50\1\0\1\50\2\0\2\50\2\0\2\50\1\0"+
    "\3\50\6\0\2\50\1\0\1\50\24\0\1\50\1\77"+
    "\1\50\1\0\1\50\2\0\2\50\2\0\2\50\1\0"+
    "\3\50\5\0\1\100\2\50\1\0\1\50\24\0\2\50"+
    "\1\101\1\0\1\50\2\0\2\50\2\0\2\50\1\0"+
    "\3\50\6\0\2\50\1\0\1\50\24\0\3\50\1\102"+
    "\1\103\2\0\2\50\2\0\1\50\1\104\1\0\3\50"+
    "\6\0\2\50\1\0\1\50\24\0\3\50\1\0\1\50"+
    "\2\0\2\50\2\0\2\50\1\0\1\50\1\105\1\50"+
    "\6\0\2\50\1\0\1\50\24\0\3\50\1\0\1\50"+
    "\2\0\2\50\2\0\2\50\1\0\2\50\1\105\4\0"+
    "\4\106\1\0\30\106\1\0\1\106\2\0\2\106\2\0"+
    "\2\106\1\0\3\106\4\0\4\107\1\0\30\107\1\0"+
    "\1\107\2\0\2\107\2\0\2\107\1\0\3\107\5\0"+
    "\1\110\55\0\1\111\1\110\1\0\1\111\2\0\24\111"+
    "\27\0\2\112\1\0\1\112\24\0\3\112\1\0\1\112"+
    "\2\0\2\112\2\0\2\112\1\0\3\112\4\0\2\3"+
    "\1\112\1\113\1\0\1\112\24\3\3\112\1\0\1\112"+
    "\2\0\2\112\2\0\2\112\1\0\3\112\6\0\2\112"+
    "\1\7\1\114\24\0\3\112\1\0\1\112\2\0\2\112"+
    "\2\0\1\112\1\114\1\7\3\112\1\7\3\0\2\3"+
    "\1\0\1\3\2\0\2\3\1\115\21\3\25\0\2\3"+
    "\1\0\1\3\2\0\7\3\1\116\14\3\25\0\2\3"+
    "\1\0\1\3\2\0\6\3\1\117\15\3\25\0\2\3"+
    "\1\0\1\3\2\0\6\3\1\117\1\120\14\3\25\0"+
    "\2\3\1\0\1\3\2\0\12\3\1\121\11\3\25\0"+
    "\2\3\1\0\1\3\2\0\13\3\1\122\10\3\25\0"+
    "\2\3\1\0\1\3\2\0\20\3\1\66\3\3\25\0"+
    "\2\3\1\0\1\3\2\0\1\3\1\123\11\3\1\124"+
    "\10\3\25\0\2\3\1\0\1\3\2\0\22\3\1\125"+
    "\1\3\25\0\2\3\1\0\1\3\2\0\21\3\1\66"+
    "\2\3\25\0\2\3\1\0\1\3\2\0\6\3\1\126"+
    "\15\3\25\0\2\3\1\0\1\3\2\0\16\3\1\127"+
    "\1\130\4\3\25\0\2\3\1\0\1\3\2\0\1\3"+
    "\1\66\22\3\25\0\2\3\1\0\1\3\2\0\12\3"+
    "\1\131\11\3\25\0\2\3\1\0\1\3\2\0\12\3"+
    "\1\132\11\3\25\0\2\3\1\0\1\3\2\0\13\3"+
    "\1\133\10\3\25\0\2\3\1\0\1\3\2\0\7\3"+
    "\1\134\14\3\25\0\2\3\1\0\1\3\2\0\13\3"+
    "\1\135\10\3\24\0\2\46\1\100\45\46\1\0\6\46"+
    "\1\0\4\136\1\0\30\136\1\0\1\136\2\0\2\136"+
    "\2\0\7\136\3\0\4\137\1\0\30\137\1\0\1\137"+
    "\2\0\2\137\2\0\2\137\1\0\3\137\4\0\4\106"+
    "\1\0\30\106\1\0\1\106\2\0\2\106\2\0\2\106"+
    "\1\0\3\106\1\0\1\140\2\0\4\107\1\0\30\107"+
    "\1\0\1\107\2\0\2\107\2\0\2\107\1\0\3\107"+
    "\2\0\1\140\1\0\1\111\2\0\1\111\2\0\24\111"+
    "\27\0\2\141\1\0\1\141\24\0\3\141\1\0\1\141"+
    "\2\0\2\141\2\0\2\141\1\0\3\141\4\0\2\3"+
    "\1\141\1\142\1\0\1\141\24\3\3\141\1\0\1\141"+
    "\2\0\2\141\2\0\2\141\1\0\3\141\6\0\2\141"+
    "\1\7\1\143\24\0\3\141\1\0\1\141\2\0\2\141"+
    "\2\0\1\141\1\143\1\7\3\141\1\7\3\0\2\3"+
    "\1\0\1\3\2\0\3\3\1\144\20\3\25\0\2\3"+
    "\1\0\1\3\2\0\14\3\1\145\7\3\25\0\2\3"+
    "\1\0\1\3\2\0\2\3\1\66\21\3\25\0\2\3"+
    "\1\0\1\3\2\0\5\3\1\134\16\3\25\0\2\3"+
    "\1\0\1\3\2\0\7\3\1\146\14\3\25\0\2\3"+
    "\1\0\1\3\2\0\7\3\1\120\14\3\25\0\2\3"+
    "\1\0\1\3\2\0\11\3\1\64\12\3\25\0\2\3"+
    "\1\0\1\3\2\0\6\3\1\66\15\3\25\0\2\3"+
    "\1\0\1\3\2\0\2\3\1\147\21\3\25\0\2\3"+
    "\1\0\1\3\2\0\7\3\1\150\14\3\25\0\2\3"+
    "\1\0\1\3\2\0\3\3\1\151\20\3\25\0\2\3"+
    "\1\0\1\3\2\0\2\3\1\152\21\3\25\0\2\3"+
    "\1\0\1\3\2\0\3\3\1\153\20\3\25\0\2\3"+
    "\1\0\1\3\2\0\5\3\1\154\16\3\25\0\2\3"+
    "\1\0\1\3\2\0\17\3\1\117\4\3\25\0\2\3"+
    "\1\0\1\3\2\0\10\3\1\66\13\3\25\0\2\3"+
    "\1\0\1\3\2\0\15\3\1\66\6\3\25\0\4\136"+
    "\1\0\30\136\1\155\1\136\2\0\2\136\2\0\7\136"+
    "\5\0\2\156\1\0\1\156\24\0\3\156\1\0\1\156"+
    "\2\0\2\156\2\0\2\156\1\0\3\156\4\0\2\3"+
    "\1\156\1\157\1\0\1\156\24\3\3\156\1\0\1\156"+
    "\2\0\2\156\2\0\2\156\1\0\3\156\6\0\2\156"+
    "\1\7\1\160\24\0\3\156\1\0\1\156\2\0\2\156"+
    "\2\0\1\156\1\160\1\7\3\156\1\7\3\0\2\3"+
    "\1\0\1\3\2\0\4\3\1\66\17\3\25\0\2\3"+
    "\1\0\1\3\2\0\1\3\1\161\22\3\25\0\2\3"+
    "\1\0\1\3\2\0\13\3\1\162\10\3\25\0\2\3"+
    "\1\0\1\3\2\0\11\3\1\163\12\3\25\0\2\3"+
    "\1\0\1\3\2\0\3\3\1\164\20\3\25\0\2\3"+
    "\1\0\1\3\2\0\14\3\1\165\7\3\25\0\2\3"+
    "\1\0\1\3\2\0\7\3\1\117\14\3\25\0\2\3"+
    "\1\0\1\3\2\0\17\3\1\166\4\3\25\0\2\3"+
    "\1\0\1\3\2\0\7\3\1\167\14\3\63\0\1\170"+
    "\22\0\2\171\1\0\1\171\24\0\3\171\1\0\1\171"+
    "\2\0\2\171\2\0\2\171\1\0\3\171\4\0\2\3"+
    "\1\171\1\172\1\0\1\171\24\3\3\171\1\0\1\171"+
    "\2\0\2\171\2\0\2\171\1\0\3\171\6\0\2\171"+
    "\1\7\1\173\24\0\3\171\1\0\1\171\2\0\2\171"+
    "\2\0\1\171\1\173\1\7\3\171\1\7\3\0\2\3"+
    "\1\0\1\3\2\0\12\3\1\66\11\3\25\0\2\3"+
    "\1\0\1\3\2\0\12\3\1\174\11\3\25\0\2\3"+
    "\1\0\1\3\2\0\16\3\1\66\5\3\25\0\2\3"+
    "\1\0\1\3\2\0\12\3\1\175\11\3\25\0\2\3"+
    "\1\0\1\3\2\0\17\3\1\176\4\3\25\0\2\3"+
    "\1\0\1\3\2\0\17\3\1\61\4\3\25\0\2\3"+
    "\1\0\1\3\2\0\13\3\1\177\10\3\27\0\2\200"+
    "\1\0\1\200\24\0\3\200\1\0\1\200\2\0\2\200"+
    "\2\0\2\200\1\0\3\200\4\0\2\3\1\200\1\201"+
    "\1\0\1\200\24\3\3\200\1\0\1\200\2\0\2\200"+
    "\2\0\2\200\1\0\3\200\6\0\2\200\1\7\1\202"+
    "\24\0\3\200\1\0\1\200\2\0\2\200\2\0\1\200"+
    "\1\202\1\7\3\200\1\7\3\0\2\3\1\0\1\3"+
    "\2\0\14\3\1\117\7\3\25\0\2\3\1\0\1\3"+
    "\2\0\5\3\1\125\16\3\25\0\2\3\1\0\1\3"+
    "\2\0\7\3\1\66\14\3\25\0\2\3\1\0\1\3"+
    "\2\0\11\3\1\161\12\3\27\0\2\203\1\0\1\203"+
    "\24\0\3\203\1\0\1\203\2\0\2\203\2\0\2\203"+
    "\1\0\3\203\4\0\2\3\1\203\1\204\1\0\1\203"+
    "\24\3\3\203\1\0\1\203\2\0\2\203\2\0\2\203"+
    "\1\0\3\203\6\0\2\203\1\7\1\205\24\0\3\203"+
    "\1\0\1\203\2\0\2\203\2\0\1\203\1\205\1\7"+
    "\3\203\1\7\5\0\2\206\1\0\1\206\24\0\3\206"+
    "\1\0\1\206\2\0\2\206\2\0\2\206\1\0\3\206"+
    "\4\0\2\3\1\206\1\207\1\0\1\206\24\3\3\206"+
    "\1\0\1\206\2\0\2\206\2\0\2\206\1\0\3\206"+
    "\6\0\2\206\1\7\1\210\24\0\3\206\1\0\1\206"+
    "\2\0\2\206\2\0\1\206\1\210\1\7\3\206\1\7"+
    "\5\0\2\211\1\0\1\211\24\0\3\211\1\0\1\211"+
    "\2\0\2\211\2\0\2\211\1\0\3\211\4\0\2\3"+
    "\1\211\1\212\1\0\1\211\24\3\3\211\1\0\1\211"+
    "\2\0\2\211\2\0\2\211\1\0\3\211\6\0\2\211"+
    "\1\7\1\213\24\0\3\211\1\0\1\211\2\0\2\211"+
    "\2\0\1\211\1\213\1\7\3\211\1\7\5\0\2\214"+
    "\1\0\1\214\24\0\3\214\1\0\1\214\2\0\2\214"+
    "\2\0\2\214\1\0\3\214\4\0\2\3\1\214\1\215"+
    "\1\0\1\214\24\3\3\214\1\0\1\214\2\0\2\214"+
    "\2\0\2\214\1\0\3\214\6\0\2\214\1\7\1\216"+
    "\24\0\3\214\1\0\1\214\2\0\2\214\2\0\1\214"+
    "\1\216\1\7\3\214\1\7\5\0\2\217\1\0\1\217"+
    "\24\0\3\217\1\0\1\217\2\0\2\217\2\0\2\217"+
    "\1\0\3\217\4\0\2\3\1\217\1\220\1\0\1\217"+
    "\24\3\3\217\1\0\1\217\2\0\2\217\2\0\2\217"+
    "\1\0\3\217\6\0\2\217\1\7\1\221\24\0\3\217"+
    "\1\0\1\217\2\0\2\217\2\0\1\217\1\221\1\7"+
    "\3\217\1\7\5\0\2\222\1\0\1\222\24\0\3\222"+
    "\1\0\1\222\2\0\2\222\2\0\2\222\1\0\3\222"+
    "\4\0\2\3\1\222\1\223\1\0\1\222\24\3\3\222"+
    "\1\0\1\222\2\0\2\222\2\0\2\222\1\0\3\222"+
    "\6\0\2\222\1\7\1\224\24\0\3\222\1\0\1\222"+
    "\2\0\2\222\2\0\1\222\1\224\1\7\3\222\1\7"+
    "\5\0\2\225\1\0\1\225\24\0\3\225\1\0\1\225"+
    "\2\0\2\225\2\0\2\225\1\0\3\225\4\0\2\3"+
    "\1\225\1\226\1\0\1\225\24\3\3\225\1\0\1\225"+
    "\2\0\2\225\2\0\2\225\1\0\3\225\6\0\2\225"+
    "\1\7\1\227\24\0\3\225\1\0\1\225\2\0\2\225"+
    "\2\0\1\225\1\227\1\7\3\225\1\7\5\0\2\230"+
    "\1\0\1\230\24\0\3\230\1\0\1\230\2\0\2\230"+
    "\2\0\2\230\1\0\3\230\4\0\2\3\1\230\1\231"+
    "\1\0\1\230\24\3\3\230\1\0\1\230\2\0\2\230"+
    "\2\0\2\230\1\0\3\230\6\0\2\230\1\7\1\232"+
    "\24\0\3\230\1\0\1\230\2\0\2\230\2\0\1\230"+
    "\1\232\1\7\3\230\1\7\5\0\2\233\1\0\1\233"+
    "\24\0\3\233\1\0\1\233\2\0\2\233\2\0\2\233"+
    "\1\0\3\233\4\0\2\3\1\233\1\234\1\0\1\233"+
    "\24\3\3\233\1\0\1\233\2\0\2\233\2\0\2\233"+
    "\1\0\3\233\6\0\2\233\1\7\1\235\24\0\3\233"+
    "\1\0\1\233\2\0\2\233\2\0\1\233\1\235\1\7"+
    "\3\233\1\7\5\0\2\236\1\0\1\236\24\0\3\236"+
    "\1\0\1\236\2\0\2\236\2\0\2\236\1\0\3\236"+
    "\4\0\2\3\1\236\1\237\1\0\1\236\24\3\3\236"+
    "\1\0\1\236\2\0\2\236\2\0\2\236\1\0\3\236"+
    "\6\0\2\236\1\7\1\240\24\0\3\236\1\0\1\236"+
    "\2\0\2\236\2\0\1\236\1\240\1\7\3\236\1\7"+
    "\5\0\2\241\1\0\1\241\24\0\3\241\1\0\1\241"+
    "\2\0\2\241\2\0\2\241\1\0\3\241\4\0\2\3"+
    "\1\241\1\242\1\0\1\241\24\3\3\241\1\0\1\241"+
    "\2\0\2\241\2\0\2\241\1\0\3\241\6\0\2\241"+
    "\1\7\1\243\24\0\3\241\1\0\1\241\2\0\2\241"+
    "\2\0\1\241\1\243\1\7\3\241\1\7\5\0\2\244"+
    "\1\0\1\244\24\0\3\244\1\0\1\244\2\0\2\244"+
    "\2\0\2\244\1\0\3\244\4\0\2\3\1\244\1\245"+
    "\1\0\1\244\24\3\3\244\1\0\1\244\2\0\2\244"+
    "\2\0\2\244\1\0\3\244\6\0\2\244\1\7\1\246"+
    "\24\0\3\244\1\0\1\244\2\0\2\244\2\0\1\244"+
    "\1\246\1\7\3\244\1\7\5\0\2\247\1\0\1\247"+
    "\24\0\3\247\1\0\1\247\2\0\2\247\2\0\2\247"+
    "\1\0\3\247\4\0\2\3\1\247\1\250\1\0\1\247"+
    "\24\3\3\247\1\0\1\247\2\0\2\247\2\0\2\247"+
    "\1\0\3\247\6\0\2\247\1\7\1\251\24\0\3\247"+
    "\1\0\1\247\2\0\2\247\2\0\1\247\1\251\1\7"+
    "\3\247\1\7\5\0\2\252\1\0\1\252\24\0\3\252"+
    "\1\0\1\252\2\0\2\252\2\0\2\252\1\0\3\252"+
    "\4\0\2\3\1\252\1\253\1\0\1\252\24\3\3\252"+
    "\1\0\1\252\2\0\2\252\2\0\2\252\1\0\3\252"+
    "\6\0\2\252\1\7\1\254\24\0\3\252\1\0\1\252"+
    "\2\0\2\252\2\0\1\252\1\254\1\7\3\252\1\7"+
    "\5\0\2\255\1\0\1\255\24\0\3\255\1\0\1\255"+
    "\2\0\2\255\2\0\2\255\1\0\3\255\4\0\2\3"+
    "\1\255\1\256\1\0\1\255\24\3\3\255\1\0\1\255"+
    "\2\0\2\255\2\0\2\255\1\0\3\255\6\0\2\255"+
    "\1\7\1\257\24\0\3\255\1\0\1\255\2\0\2\255"+
    "\2\0\1\255\1\257\1\7\3\255\1\7\5\0\2\260"+
    "\1\0\1\260\24\0\3\260\1\0\1\260\2\0\2\260"+
    "\2\0\2\260\1\0\3\260\4\0\2\3\1\260\1\261"+
    "\1\0\1\260\24\3\3\260\1\0\1\260\2\0\2\260"+
    "\2\0\2\260\1\0\3\260\6\0\2\260\1\7\1\262"+
    "\24\0\3\260\1\0\1\260\2\0\2\260\2\0\1\260"+
    "\1\262\1\7\3\260\1\7\5\0\2\263\1\0\1\263"+
    "\24\0\3\263\1\0\1\263\2\0\2\263\2\0\2\263"+
    "\1\0\3\263\4\0\2\3\1\263\1\264\1\0\1\263"+
    "\24\3\3\263\1\0\1\263\2\0\2\263\2\0\2\263"+
    "\1\0\3\263\6\0\2\263\1\7\1\265\24\0\3\263"+
    "\1\0\1\263\2\0\2\263\2\0\1\263\1\265\1\7"+
    "\3\263\1\7\5\0\2\266\1\0\1\266\24\0\3\266"+
    "\1\0\1\266\2\0\2\266\2\0\2\266\1\0\3\266"+
    "\4\0\2\3\1\266\1\267\1\0\1\266\24\3\3\266"+
    "\1\0\1\266\2\0\2\266\2\0\2\266\1\0\3\266"+
    "\6\0\2\266\1\7\1\270\24\0\3\266\1\0\1\266"+
    "\2\0\2\266\2\0\1\266\1\270\1\7\3\266\1\7"+
    "\5\0\2\271\1\0\1\271\24\0\3\271\1\0\1\271"+
    "\2\0\2\271\2\0\2\271\1\0\3\271\4\0\2\3"+
    "\1\271\1\272\1\0\1\271\24\3\3\271\1\0\1\271"+
    "\2\0\2\271\2\0\2\271\1\0\3\271\6\0\2\271"+
    "\1\7\1\273\24\0\3\271\1\0\1\271\2\0\2\271"+
    "\2\0\1\271\1\273\1\7\3\271\1\7\5\0\2\274"+
    "\1\0\1\274\24\0\3\274\1\0\1\274\2\0\2\274"+
    "\2\0\2\274\1\0\3\274\4\0\2\3\1\274\1\275"+
    "\1\0\1\274\24\3\3\274\1\0\1\274\2\0\2\274"+
    "\2\0\2\274\1\0\3\274\6\0\2\274\1\7\1\276"+
    "\24\0\3\274\1\0\1\274\2\0\2\274\2\0\1\274"+
    "\1\276\1\7\3\274\1\7\5\0\2\277\1\0\1\277"+
    "\24\0\3\277\1\0\1\277\2\0\2\277\2\0\2\277"+
    "\1\0\3\277\4\0\2\3\1\277\1\300\1\0\1\277"+
    "\24\3\3\277\1\0\1\277\2\0\2\277\2\0\2\277"+
    "\1\0\3\277\6\0\2\277\1\7\1\301\24\0\3\277"+
    "\1\0\1\277\2\0\2\277\2\0\1\277\1\301\1\7"+
    "\3\277\1\7\5\0\2\302\1\0\1\302\24\0\3\302"+
    "\1\0\1\302\2\0\2\302\2\0\2\302\1\0\3\302"+
    "\4\0\2\3\1\302\1\303\1\0\1\302\24\3\3\302"+
    "\1\0\1\302\2\0\2\302\2\0\2\302\1\0\3\302"+
    "\6\0\2\302\1\7\1\304\24\0\3\302\1\0\1\302"+
    "\2\0\2\302\2\0\1\302\1\304\1\7\3\302\1\7"+
    "\5\0\2\305\1\0\1\305\24\0\3\305\1\0\1\305"+
    "\2\0\2\305\2\0\2\305\1\0\3\305\4\0\2\3"+
    "\1\305\1\306\1\0\1\305\24\3\3\305\1\0\1\305"+
    "\2\0\2\305\2\0\2\305\1\0\3\305\6\0\2\305"+
    "\1\7\1\307\24\0\3\305\1\0\1\305\2\0\2\305"+
    "\2\0\1\305\1\307\1\7\3\305\1\7\5\0\2\310"+
    "\1\0\1\310\24\0\3\310\1\0\1\310\2\0\2\310"+
    "\2\0\2\310\1\0\3\310\4\0\2\3\1\310\1\311"+
    "\1\0\1\310\24\3\3\310\1\0\1\310\2\0\2\310"+
    "\2\0\2\310\1\0\3\310\6\0\2\310\1\7\1\312"+
    "\24\0\3\310\1\0\1\310\2\0\2\310\2\0\1\310"+
    "\1\312\1\7\3\310\1\7\5\0\2\313\1\0\1\313"+
    "\24\0\3\313\1\0\1\313\2\0\2\313\2\0\2\313"+
    "\1\0\3\313\4\0\2\3\1\313\1\314\1\0\1\313"+
    "\24\3\3\313\1\0\1\313\2\0\2\313\2\0\2\313"+
    "\1\0\3\313\6\0\2\313\1\7\1\315\24\0\3\313"+
    "\1\0\1\313\2\0\2\313\2\0\1\313\1\315\1\7"+
    "\3\313\1\7\5\0\2\316\1\0\1\316\24\0\3\316"+
    "\1\0\1\316\2\0\2\316\2\0\2\316\1\0\3\316"+
    "\4\0\2\3\1\316\1\317\1\0\1\316\24\3\3\316"+
    "\1\0\1\316\2\0\2\316\2\0\2\316\1\0\3\316"+
    "\6\0\2\316\1\7\1\320\24\0\3\316\1\0\1\316"+
    "\2\0\2\316\2\0\1\316\1\320\1\7\3\316\1\7"+
    "\5\0\2\321\1\0\1\321\24\0\3\321\1\0\1\321"+
    "\2\0\2\321\2\0\2\321\1\0\3\321\4\0\2\3"+
    "\1\321\1\322\1\0\1\321\24\3\3\321\1\0\1\321"+
    "\2\0\2\321\2\0\2\321\1\0\3\321\6\0\2\321"+
    "\1\7\1\323\24\0\3\321\1\0\1\321\2\0\2\321"+
    "\2\0\1\321\1\323\1\7\3\321\1\7\5\0\2\324"+
    "\1\0\1\324\24\0\3\324\1\0\1\324\2\0\2\324"+
    "\2\0\2\324\1\0\3\324\4\0\2\3\1\324\1\325"+
    "\1\0\1\324\24\3\3\324\1\0\1\324\2\0\2\324"+
    "\2\0\2\324\1\0\3\324\6\0\2\324\1\7\1\326"+
    "\24\0\3\324\1\0\1\324\2\0\2\324\2\0\1\324"+
    "\1\326\1\7\3\324\1\7\5\0\2\327\1\0\1\327"+
    "\24\0\3\327\1\0\1\327\2\0\2\327\2\0\2\327"+
    "\1\0\3\327\4\0\2\3\1\327\1\330\1\0\1\327"+
    "\24\3\3\327\1\0\1\327\2\0\2\327\2\0\2\327"+
    "\1\0\3\327\6\0\2\327\1\7\1\331\24\0\3\327"+
    "\1\0\1\327\2\0\2\327\2\0\1\327\1\331\1\7"+
    "\3\327\1\7\5\0\2\332\1\0\1\332\24\0\3\332"+
    "\1\0\1\332\2\0\2\332\2\0\2\332\1\0\3\332"+
    "\4\0\2\3\1\332\1\333\1\0\1\332\24\3\3\332"+
    "\1\0\1\332\2\0\2\332\2\0\2\332\1\0\3\332"+
    "\6\0\2\332\1\7\1\334\24\0\3\332\1\0\1\332"+
    "\2\0\2\332\2\0\1\332\1\334\1\7\3\332\1\7"+
    "\5\0\2\335\1\0\1\335\24\0\3\335\1\0\1\335"+
    "\2\0\2\335\2\0\2\335\1\0\3\335\4\0\2\3"+
    "\1\335\1\336\1\0\1\335\24\3\3\335\1\0\1\335"+
    "\2\0\2\335\2\0\2\335\1\0\3\335\6\0\2\335"+
    "\1\7\1\337\24\0\3\335\1\0\1\335\2\0\2\335"+
    "\2\0\1\335\1\337\1\7\3\335\1\7\5\0\2\340"+
    "\1\0\1\340\24\0\3\340\1\0\1\340\2\0\2\340"+
    "\2\0\2\340\1\0\3\340\4\0\2\3\1\340\1\341"+
    "\1\0\1\340\24\3\3\340\1\0\1\340\2\0\2\340"+
    "\2\0\2\340\1\0\3\340\6\0\2\340\1\7\1\342"+
    "\24\0\3\340\1\0\1\340\2\0\2\340\2\0\1\340"+
    "\1\342\1\7\3\340\1\7\5\0\2\343\1\0\1\343"+
    "\24\0\3\343\1\0\1\343\2\0\2\343\2\0\2\343"+
    "\1\0\3\343\4\0\2\3\1\343\1\344\1\0\1\343"+
    "\24\3\3\343\1\0\1\343\2\0\2\343\2\0\2\343"+
    "\1\0\3\343\6\0\2\343\1\7\1\345\24\0\3\343"+
    "\1\0\1\343\2\0\2\343\2\0\1\343\1\345\1\7"+
    "\3\343\1\7\5\0\2\346\1\0\1\346\24\0\3\346"+
    "\1\0\1\346\2\0\2\346\2\0\2\346\1\0\3\346"+
    "\4\0\2\3\1\346\1\347\1\0\1\346\24\3\3\346"+
    "\1\0\1\346\2\0\2\346\2\0\2\346\1\0\3\346"+
    "\6\0\2\346\1\7\1\350\24\0\3\346\1\0\1\346"+
    "\2\0\2\346\2\0\1\346\1\350\1\7\3\346\1\7"+
    "\5\0\2\351\1\0\1\351\24\0\3\351\1\0\1\351"+
    "\2\0\2\351\2\0\2\351\1\0\3\351\4\0\2\3"+
    "\1\351\1\352\1\0\1\351\24\3\3\351\1\0\1\351"+
    "\2\0\2\351\2\0\2\351\1\0\3\351\6\0\2\351"+
    "\1\7\1\353\24\0\3\351\1\0\1\351\2\0\2\351"+
    "\2\0\1\351\1\353\1\7\3\351\1\7\5\0\2\354"+
    "\1\0\1\354\24\0\3\354\1\0\1\354\2\0\2\354"+
    "\2\0\2\354\1\0\3\354\4\0\2\3\1\354\1\355"+
    "\1\0\1\354\24\3\3\354\1\0\1\354\2\0\2\354"+
    "\2\0\2\354\1\0\3\354\6\0\2\354\1\7\1\356"+
    "\24\0\3\354\1\0\1\354\2\0\2\354\2\0\1\354"+
    "\1\356\1\7\3\354\1\7\5\0\2\357\1\0\1\357"+
    "\24\0\3\357\1\0\1\357\2\0\2\357\2\0\2\357"+
    "\1\0\3\357\4\0\2\3\1\357\1\360\1\0\1\357"+
    "\24\3\3\357\1\0\1\357\2\0\2\357\2\0\2\357"+
    "\1\0\3\357\6\0\2\357\1\7\1\361\24\0\3\357"+
    "\1\0\1\357\2\0\2\357\2\0\1\357\1\361\1\7"+
    "\3\357\1\7\5\0\2\362\1\0\1\362\24\0\3\362"+
    "\1\0\1\362\2\0\2\362\2\0\2\362\1\0\3\362"+
    "\4\0\2\3\1\362\1\363\1\0\1\362\24\3\3\362"+
    "\1\0\1\362\2\0\2\362\2\0\2\362\1\0\3\362"+
    "\6\0\2\362\1\7\1\364\24\0\3\362\1\0\1\362"+
    "\2\0\2\362\2\0\1\362\1\364\1\7\3\362\1\7"+
    "\5\0\2\365\1\0\1\365\24\0\3\365\1\0\1\365"+
    "\2\0\2\365\2\0\2\365\1\0\3\365\4\0\2\3"+
    "\1\365\1\366\1\0\1\365\24\3\3\365\1\0\1\365"+
    "\2\0\2\365\2\0\2\365\1\0\3\365\6\0\2\365"+
    "\1\7\1\367\24\0\3\365\1\0\1\365\2\0\2\365"+
    "\2\0\1\365\1\367\1\7\3\365\1\7\5\0\2\370"+
    "\1\0\1\370\24\0\3\370\1\0\1\370\2\0\2\370"+
    "\2\0\2\370\1\0\3\370\4\0\2\3\1\370\1\371"+
    "\1\0\1\370\24\3\3\370\1\0\1\370\2\0\2\370"+
    "\2\0\2\370\1\0\3\370\6\0\2\370\1\7\1\372"+
    "\24\0\3\370\1\0\1\370\2\0\2\370\2\0\1\370"+
    "\1\372\1\7\3\370\1\7\5\0\2\373\1\0\1\373"+
    "\24\0\3\373\1\0\1\373\2\0\2\373\2\0\2\373"+
    "\1\0\3\373\4\0\2\3\1\373\1\374\1\0\1\373"+
    "\24\3\3\373\1\0\1\373\2\0\2\373\2\0\2\373"+
    "\1\0\3\373\6\0\2\373\1\7\1\375\24\0\3\373"+
    "\1\0\1\373\2\0\2\373\2\0\1\373\1\375\1\7"+
    "\3\373\1\7\5\0\2\376\1\0\1\376\24\0\3\376"+
    "\1\0\1\376\2\0\2\376\2\0\2\376\1\0\3\376"+
    "\4\0\2\3\1\376\1\377\1\0\1\376\24\3\3\376"+
    "\1\0\1\376\2\0\2\376\2\0\2\376\1\0\3\376"+
    "\6\0\2\376\1\7\1\u0100\24\0\3\376\1\0\1\376"+
    "\2\0\2\376\2\0\1\376\1\u0100\1\7\3\376\1\7"+
    "\5\0\2\u0101\1\0\1\u0101\24\0\3\u0101\1\0\1\u0101"+
    "\2\0\2\u0101\2\0\2\u0101\1\0\3\u0101\4\0\2\3"+
    "\1\u0101\1\u0102\1\0\1\u0101\24\3\3\u0101\1\0\1\u0101"+
    "\2\0\2\u0101\2\0\2\u0101\1\0\3\u0101\6\0\2\u0101"+
    "\1\7\1\u0103\24\0\3\u0101\1\0\1\u0101\2\0\2\u0101"+
    "\2\0\1\u0101\1\u0103\1\7\3\u0101\1\7\5\0\2\u0104"+
    "\1\0\1\u0104\24\0\3\u0104\1\0\1\u0104\2\0\2\u0104"+
    "\2\0\2\u0104\1\0\3\u0104\4\0\2\3\1\u0104\1\u0105"+
    "\1\0\1\u0104\24\3\3\u0104\1\0\1\u0104\2\0\2\u0104"+
    "\2\0\2\u0104\1\0\3\u0104\6\0\2\u0104\1\7\1\u0106"+
    "\24\0\3\u0104\1\0\1\u0104\2\0\2\u0104\2\0\1\u0104"+
    "\1\u0106\1\7\3\u0104\1\7\5\0\2\u0107\1\0\1\u0107"+
    "\24\0\3\u0107\1\0\1\u0107\2\0\2\u0107\2\0\2\u0107"+
    "\1\0\3\u0107\4\0\2\3\1\u0107\1\u0108\1\0\1\u0107"+
    "\24\3\3\u0107\1\0\1\u0107\2\0\2\u0107\2\0\2\u0107"+
    "\1\0\3\u0107\6\0\2\u0107\1\7\1\u0109\24\0\3\u0107"+
    "\1\0\1\u0107\2\0\2\u0107\2\0\1\u0107\1\u0109\1\7"+
    "\3\u0107\1\7\5\0\2\u010a\1\0\1\u010a\24\0\3\u010a"+
    "\1\0\1\u010a\2\0\2\u010a\2\0\2\u010a\1\0\3\u010a"+
    "\4\0\2\3\1\u010a\1\u010b\1\0\1\u010a\24\3\3\u010a"+
    "\1\0\1\u010a\2\0\2\u010a\2\0\2\u010a\1\0\3\u010a"+
    "\6\0\2\u010a\1\7\1\u010c\24\0\3\u010a\1\0\1\u010a"+
    "\2\0\2\u010a\2\0\1\u010a\1\u010c\1\7\3\u010a\1\7"+
    "\5\0\2\u010d\1\0\1\u010d\24\0\3\u010d\1\0\1\u010d"+
    "\2\0\2\u010d\2\0\2\u010d\1\0\3\u010d\4\0\2\3"+
    "\1\u010d\1\u010e\1\0\1\u010d\24\3\3\u010d\1\0\1\u010d"+
    "\2\0\2\u010d\2\0\2\u010d\1\0\3\u010d\6\0\2\u010d"+
    "\1\7\1\u010f\24\0\3\u010d\1\0\1\u010d\2\0\2\u010d"+
    "\2\0\1\u010d\1\u010f\1\7\3\u010d\1\7\5\0\2\u0110"+
    "\1\0\1\u0110\24\0\3\u0110\1\0\1\u0110\2\0\2\u0110"+
    "\2\0\2\u0110\1\0\3\u0110\4\0\2\3\1\u0110\1\u0111"+
    "\1\0\1\u0110\24\3\3\u0110\1\0\1\u0110\2\0\2\u0110"+
    "\2\0\2\u0110\1\0\3\u0110\6\0\2\u0110\1\7\1\u0112"+
    "\24\0\3\u0110\1\0\1\u0110\2\0\2\u0110\2\0\1\u0110"+
    "\1\u0112\1\7\3\u0110\1\7\5\0\2\u0113\1\0\1\u0113"+
    "\24\0\3\u0113\1\0\1\u0113\2\0\2\u0113\2\0\2\u0113"+
    "\1\0\3\u0113\4\0\2\3\1\u0113\1\u0114\1\0\1\u0113"+
    "\24\3\3\u0113\1\0\1\u0113\2\0\2\u0113\2\0\2\u0113"+
    "\1\0\3\u0113\6\0\2\u0113\1\7\1\u0115\24\0\3\u0113"+
    "\1\0\1\u0113\2\0\2\u0113\2\0\1\u0113\1\u0115\1\7"+
    "\3\u0113\1\7\5\0\2\u0116\1\0\1\u0116\24\0\3\u0116"+
    "\1\0\1\u0116\2\0\2\u0116\2\0\2\u0116\1\0\3\u0116"+
    "\4\0\2\3\1\u0116\1\u0117\1\0\1\u0116\24\3\3\u0116"+
    "\1\0\1\u0116\2\0\2\u0116\2\0\2\u0116\1\0\3\u0116"+
    "\6\0\2\u0116\1\7\1\u0118\24\0\3\u0116\1\0\1\u0116"+
    "\2\0\2\u0116\2\0\1\u0116\1\u0118\1\7\3\u0116\1\7"+
    "\5\0\2\u0119\1\0\1\u0119\24\0\3\u0119\1\0\1\u0119"+
    "\2\0\2\u0119\2\0\2\u0119\1\0\3\u0119\4\0\2\3"+
    "\1\u0119\1\u011a\1\0\1\u0119\24\3\3\u0119\1\0\1\u0119"+
    "\2\0\2\u0119\2\0\2\u0119\1\0\3\u0119\6\0\2\u0119"+
    "\1\7\1\u011b\24\0\3\u0119\1\0\1\u0119\2\0\2\u0119"+
    "\2\0\1\u0119\1\u011b\1\7\3\u0119\1\7\5\0\2\u011c"+
    "\1\0\1\u011c\24\0\3\u011c\1\0\1\u011c\2\0\2\u011c"+
    "\2\0\2\u011c\1\0\3\u011c\4\0\2\3\1\u011c\1\u011d"+
    "\1\0\1\u011c\24\3\3\u011c\1\0\1\u011c\2\0\2\u011c"+
    "\2\0\2\u011c\1\0\3\u011c\6\0\2\u011c\1\7\1\u011e"+
    "\24\0\3\u011c\1\0\1\u011c\2\0\2\u011c\2\0\1\u011c"+
    "\1\u011e\1\7\3\u011c\1\7\5\0\2\u011f\1\0\1\u011f"+
    "\24\0\3\u011f\1\0\1\u011f\2\0\2\u011f\2\0\2\u011f"+
    "\1\0\3\u011f\4\0\2\3\1\u011f\1\u0120\1\0\1\u011f"+
    "\24\3\3\u011f\1\0\1\u011f\2\0\2\u011f\2\0\2\u011f"+
    "\1\0\3\u011f\6\0\2\u011f\1\7\1\u0121\24\0\3\u011f"+
    "\1\0\1\u011f\2\0\2\u011f\2\0\1\u011f\1\u0121\1\7"+
    "\3\u011f\1\7\5\0\2\u0122\1\0\1\u0122\24\0\3\u0122"+
    "\1\0\1\u0122\2\0\2\u0122\2\0\2\u0122\1\0\3\u0122"+
    "\4\0\2\3\1\u0122\1\u0123\1\0\1\u0122\24\3\3\u0122"+
    "\1\0\1\u0122\2\0\2\u0122\2\0\2\u0122\1\0\3\u0122"+
    "\6\0\2\u0122\1\7\1\u0124\24\0\3\u0122\1\0\1\u0122"+
    "\2\0\2\u0122\2\0\1\u0122\1\u0124\1\7\3\u0122\1\7"+
    "\5\0\2\u0125\1\0\1\u0125\24\0\3\u0125\1\0\1\u0125"+
    "\2\0\2\u0125\2\0\2\u0125\1\0\3\u0125\4\0\2\3"+
    "\1\u0125\1\u0126\1\0\1\u0125\24\3\3\u0125\1\0\1\u0125"+
    "\2\0\2\u0125\2\0\2\u0125\1\0\3\u0125\6\0\2\u0125"+
    "\1\7\1\u0127\24\0\3\u0125\1\0\1\u0125\2\0\2\u0125"+
    "\2\0\1\u0125\1\u0127\1\7\3\u0125\1\7\5\0\2\u0128"+
    "\1\0\1\u0128\24\0\3\u0128\1\0\1\u0128\2\0\2\u0128"+
    "\2\0\2\u0128\1\0\3\u0128\4\0\2\3\1\u0128\1\u0129"+
    "\1\0\1\u0128\24\3\3\u0128\1\0\1\u0128\2\0\2\u0128"+
    "\2\0\2\u0128\1\0\3\u0128\6\0\2\u0128\1\7\1\u012a"+
    "\24\0\3\u0128\1\0\1\u0128\2\0\2\u0128\2\0\1\u0128"+
    "\1\u012a\1\7\3\u0128\1\7\5\0\2\u012b\1\0\1\u012b"+
    "\24\0\3\u012b\1\0\1\u012b\2\0\2\u012b\2\0\2\u012b"+
    "\1\0\3\u012b\4\0\2\3\1\u012b\1\u012c\1\0\1\u012b"+
    "\24\3\3\u012b\1\0\1\u012b\2\0\2\u012b\2\0\2\u012b"+
    "\1\0\3\u012b\6\0\2\u012b\1\7\1\u012d\24\0\3\u012b"+
    "\1\0\1\u012b\2\0\2\u012b\2\0\1\u012b\1\u012d\1\7"+
    "\3\u012b\1\7\5\0\2\u012e\1\0\1\u012e\24\0\3\u012e"+
    "\1\0\1\u012e\2\0\2\u012e\2\0\2\u012e\1\0\3\u012e"+
    "\4\0\2\3\1\u012e\1\u012f\1\0\1\u012e\24\3\3\u012e"+
    "\1\0\1\u012e\2\0\2\u012e\2\0\2\u012e\1\0\3\u012e"+
    "\6\0\2\u012e\1\7\1\u0130\24\0\3\u012e\1\0\1\u012e"+
    "\2\0\2\u012e\2\0\1\u012e\1\u0130\1\7\3\u012e\1\7"+
    "\5\0\2\u0131\1\0\1\u0131\24\0\3\u0131\1\0\1\u0131"+
    "\2\0\2\u0131\2\0\2\u0131\1\0\3\u0131\4\0\2\3"+
    "\1\u0131\1\u0132\1\0\1\u0131\24\3\3\u0131\1\0\1\u0131"+
    "\2\0\2\u0131\2\0\2\u0131\1\0\3\u0131\6\0\2\u0131"+
    "\1\7\1\u0133\24\0\3\u0131\1\0\1\u0131\2\0\2\u0131"+
    "\2\0\1\u0131\1\u0133\1\7\3\u0131\1\7\5\0\2\u0134"+
    "\1\0\1\u0134\24\0\3\u0134\1\0\1\u0134\2\0\2\u0134"+
    "\2\0\2\u0134\1\0\3\u0134\4\0\2\3\1\u0134\1\u0135"+
    "\1\0\1\u0134\24\3\3\u0134\1\0\1\u0134\2\0\2\u0134"+
    "\2\0\2\u0134\1\0\3\u0134\6\0\2\u0134\1\7\1\u0136"+
    "\24\0\3\u0134\1\0\1\u0134\2\0\2\u0134\2\0\1\u0134"+
    "\1\u0136\1\7\3\u0134\1\7\5\0\2\u0137\1\0\1\u0137"+
    "\24\0\3\u0137\1\0\1\u0137\2\0\2\u0137\2\0\2\u0137"+
    "\1\0\3\u0137\4\0\2\3\1\u0137\1\u0138\1\0\1\u0137"+
    "\24\3\3\u0137\1\0\1\u0137\2\0\2\u0137\2\0\2\u0137"+
    "\1\0\3\u0137\6\0\2\u0137\1\7\1\u0139\24\0\3\u0137"+
    "\1\0\1\u0137\2\0\2\u0137\2\0\1\u0137\1\u0139\1\7"+
    "\3\u0137\1\7\5\0\2\u013a\1\0\1\u013a\24\0\3\u013a"+
    "\1\0\1\u013a\2\0\2\u013a\2\0\2\u013a\1\0\3\u013a"+
    "\4\0\2\3\1\u013a\1\u013b\1\0\1\u013a\24\3\3\u013a"+
    "\1\0\1\u013a\2\0\2\u013a\2\0\2\u013a\1\0\3\u013a"+
    "\6\0\2\u013a\1\7\1\u013c\24\0\3\u013a\1\0\1\u013a"+
    "\2\0\2\u013a\2\0\1\u013a\1\u013c\1\7\3\u013a\1\7"+
    "\5\0\2\u013d\1\0\1\u013d\24\0\3\u013d\1\0\1\u013d"+
    "\2\0\2\u013d\2\0\2\u013d\1\0\3\u013d\4\0\2\3"+
    "\1\u013d\1\u013e\1\0\1\u013d\24\3\3\u013d\1\0\1\u013d"+
    "\2\0\2\u013d\2\0\2\u013d\1\0\3\u013d\6\0\2\u013d"+
    "\1\7\1\u013f\24\0\3\u013d\1\0\1\u013d\2\0\2\u013d"+
    "\2\0\1\u013d\1\u013f\1\7\3\u013d\1\7\5\0\2\u0140"+
    "\1\0\1\u0140\24\0\3\u0140\1\0\1\u0140\2\0\2\u0140"+
    "\2\0\2\u0140\1\0\3\u0140\4\0\2\3\1\u0140\1\u0141"+
    "\1\0\1\u0140\24\3\3\u0140\1\0\1\u0140\2\0\2\u0140"+
    "\2\0\2\u0140\1\0\3\u0140\6\0\2\u0140\1\7\1\u0142"+
    "\24\0\3\u0140\1\0\1\u0140\2\0\2\u0140\2\0\1\u0140"+
    "\1\u0142\1\7\3\u0140\1\7\5\0\2\u0143\1\0\1\u0143"+
    "\24\0\3\u0143\1\0\1\u0143\2\0\2\u0143\2\0\2\u0143"+
    "\1\0\3\u0143\4\0\2\3\1\u0143\1\u0144\1\0\1\u0143"+
    "\24\3\3\u0143\1\0\1\u0143\2\0\2\u0143\2\0\2\u0143"+
    "\1\0\3\u0143\6\0\2\u0143\1\7\1\u0145\24\0\3\u0143"+
    "\1\0\1\u0143\2\0\2\u0143\2\0\1\u0143\1\u0145\1\7"+
    "\3\u0143\1\7\5\0\2\u0146\1\0\1\u0146\24\0\3\u0146"+
    "\1\0\1\u0146\2\0\2\u0146\2\0\2\u0146\1\0\3\u0146"+
    "\4\0\2\3\1\u0146\1\u0147\1\0\1\u0146\24\3\3\u0146"+
    "\1\0\1\u0146\2\0\2\u0146\2\0\2\u0146\1\0\3\u0146"+
    "\6\0\2\u0146\1\7\1\u0148\24\0\3\u0146\1\0\1\u0146"+
    "\2\0\2\u0146\2\0\1\u0146\1\u0148\1\7\3\u0146\1\7"+
    "\5\0\2\u0149\1\0\1\u0149\24\0\3\u0149\1\0\1\u0149"+
    "\2\0\2\u0149\2\0\2\u0149\1\0\3\u0149\4\0\2\3"+
    "\1\u0149\1\u014a\1\0\1\u0149\24\3\3\u0149\1\0\1\u0149"+
    "\2\0\2\u0149\2\0\2\u0149\1\0\3\u0149\6\0\2\u0149"+
    "\1\7\1\u014b\24\0\3\u0149\1\0\1\u0149\2\0\2\u0149"+
    "\2\0\1\u0149\1\u014b\1\7\3\u0149\1\7\5\0\2\u014c"+
    "\1\0\1\u014c\24\0\3\u014c\1\0\1\u014c\2\0\2\u014c"+
    "\2\0\2\u014c\1\0\3\u014c\4\0\2\3\1\u014c\1\u014d"+
    "\1\0\1\u014c\24\3\3\u014c\1\0\1\u014c\2\0\2\u014c"+
    "\2\0\2\u014c\1\0\3\u014c\6\0\2\u014c\1\7\1\u014e"+
    "\24\0\3\u014c\1\0\1\u014c\2\0\2\u014c\2\0\1\u014c"+
    "\1\u014e\1\7\3\u014c\1\7\5\0\2\u014f\1\0\1\u014f"+
    "\24\0\3\u014f\1\0\1\u014f\2\0\2\u014f\2\0\2\u014f"+
    "\1\0\3\u014f\4\0\2\3\1\u014f\1\u0150\1\0\1\u014f"+
    "\24\3\3\u014f\1\0\1\u014f\2\0\2\u014f\2\0\2\u014f"+
    "\1\0\3\u014f\6\0\2\u014f\1\7\1\u0151\24\0\3\u014f"+
    "\1\0\1\u014f\2\0\2\u014f\2\0\1\u014f\1\u0151\1\7"+
    "\3\u014f\1\7\5\0\2\u0152\1\0\1\u0152\24\0\3\u0152"+
    "\1\0\1\u0152\2\0\2\u0152\2\0\2\u0152\1\0\3\u0152"+
    "\4\0\2\3\1\u0152\1\u0153\1\0\1\u0152\24\3\3\u0152"+
    "\1\0\1\u0152\2\0\2\u0152\2\0\2\u0152\1\0\3\u0152"+
    "\6\0\2\u0152\1\7\1\u0154\24\0\3\u0152\1\0\1\u0152"+
    "\2\0\2\u0152\2\0\1\u0152\1\u0154\1\7\3\u0152\1\7"+
    "\5\0\2\u0155\1\0\1\u0155\24\0\3\u0155\1\0\1\u0155"+
    "\2\0\2\u0155\2\0\2\u0155\1\0\3\u0155\4\0\2\3"+
    "\1\u0155\1\u0156\1\0\1\u0155\24\3\3\u0155\1\0\1\u0155"+
    "\2\0\2\u0155\2\0\2\u0155\1\0\3\u0155\6\0\2\u0155"+
    "\1\7\1\u0157\24\0\3\u0155\1\0\1\u0155\2\0\2\u0155"+
    "\2\0\1\u0155\1\u0157\1\7\3\u0155\1\7\5\0\2\u0158"+
    "\1\0\1\u0158\24\0\3\u0158\1\0\1\u0158\2\0\2\u0158"+
    "\2\0\2\u0158\1\0\3\u0158\4\0\2\3\1\u0158\1\u0159"+
    "\1\0\1\u0158\24\3\3\u0158\1\0\1\u0158\2\0\2\u0158"+
    "\2\0\2\u0158\1\0\3\u0158\6\0\2\u0158\1\7\1\u015a"+
    "\24\0\3\u0158\1\0\1\u0158\2\0\2\u0158\2\0\1\u0158"+
    "\1\u015a\1\7\3\u0158\1\7\5\0\2\u015b\1\0\1\u015b"+
    "\24\0\3\u015b\1\0\1\u015b\2\0\2\u015b\2\0\2\u015b"+
    "\1\0\3\u015b\4\0\2\3\1\u015b\1\u015c\1\0\1\u015b"+
    "\24\3\3\u015b\1\0\1\u015b\2\0\2\u015b\2\0\2\u015b"+
    "\1\0\3\u015b\6\0\2\u015b\1\7\1\u015d\24\0\3\u015b"+
    "\1\0\1\u015b\2\0\2\u015b\2\0\1\u015b\1\u015d\1\7"+
    "\3\u015b\1\7\5\0\2\u015e\1\0\1\u015e\24\0\3\u015e"+
    "\1\0\1\u015e\2\0\2\u015e\2\0\2\u015e\1\0\3\u015e"+
    "\4\0\2\3\1\u015e\1\u015f\1\0\1\u015e\24\3\3\u015e"+
    "\1\0\1\u015e\2\0\2\u015e\2\0\2\u015e\1\0\3\u015e"+
    "\6\0\2\u015e\1\7\1\u0160\24\0\3\u015e\1\0\1\u015e"+
    "\2\0\2\u015e\2\0\1\u015e\1\u0160\1\7\3\u015e\1\7"+
    "\5\0\2\u0161\1\0\1\u0161\24\0\3\u0161\1\0\1\u0161"+
    "\2\0\2\u0161\2\0\2\u0161\1\0\3\u0161\4\0\2\3"+
    "\1\u0161\1\u0162\1\0\1\u0161\24\3\3\u0161\1\0\1\u0161"+
    "\2\0\2\u0161\2\0\2\u0161\1\0\3\u0161\6\0\2\u0161"+
    "\1\7\1\u0163\24\0\3\u0161\1\0\1\u0161\2\0\2\u0161"+
    "\2\0\1\u0161\1\u0163\1\7\3\u0161\1\7\5\0\2\u0164"+
    "\1\0\1\u0164\24\0\3\u0164\1\0\1\u0164\2\0\2\u0164"+
    "\2\0\2\u0164\1\0\3\u0164\4\0\2\3\1\u0164\1\u0165"+
    "\1\0\1\u0164\24\3\3\u0164\1\0\1\u0164\2\0\2\u0164"+
    "\2\0\2\u0164\1\0\3\u0164\6\0\2\u0164\1\7\1\u0166"+
    "\24\0\3\u0164\1\0\1\u0164\2\0\2\u0164\2\0\1\u0164"+
    "\1\u0166\1\7\3\u0164\1\7\5\0\2\u0167\1\0\1\u0167"+
    "\24\0\3\u0167\1\0\1\u0167\2\0\2\u0167\2\0\2\u0167"+
    "\1\0\3\u0167\4\0\2\3\1\u0167\1\u0168\1\0\1\u0167"+
    "\24\3\3\u0167\1\0\1\u0167\2\0\2\u0167\2\0\2\u0167"+
    "\1\0\3\u0167\6\0\2\u0167\1\7\1\u0169\24\0\3\u0167"+
    "\1\0\1\u0167\2\0\2\u0167\2\0\1\u0167\1\u0169\1\7"+
    "\3\u0167\1\7\5\0\2\u016a\1\0\1\u016a\24\0\3\u016a"+
    "\1\0\1\u016a\2\0\2\u016a\2\0\2\u016a\1\0\3\u016a"+
    "\4\0\2\3\1\u016a\1\u016b\1\0\1\u016a\24\3\3\u016a"+
    "\1\0\1\u016a\2\0\2\u016a\2\0\2\u016a\1\0\3\u016a"+
    "\6\0\2\u016a\1\7\1\u016c\24\0\3\u016a\1\0\1\u016a"+
    "\2\0\2\u016a\2\0\1\u016a\1\u016c\1\7\3\u016a\1\7"+
    "\5\0\2\u016d\1\0\1\u016d\24\0\3\u016d\1\0\1\u016d"+
    "\2\0\2\u016d\2\0\2\u016d\1\0\3\u016d\4\0\2\3"+
    "\1\u016d\1\u016e\1\0\1\u016d\24\3\3\u016d\1\0\1\u016d"+
    "\2\0\2\u016d\2\0\2\u016d\1\0\3\u016d\6\0\2\u016d"+
    "\1\7\1\u016f\24\0\3\u016d\1\0\1\u016d\2\0\2\u016d"+
    "\2\0\1\u016d\1\u016f\1\7\3\u016d\1\7\5\0\2\u0170"+
    "\1\0\1\u0170\24\0\3\u0170\1\0\1\u0170\2\0\2\u0170"+
    "\2\0\2\u0170\1\0\3\u0170\4\0\2\3\1\u0170\1\u0171"+
    "\1\0\1\u0170\24\3\3\u0170\1\0\1\u0170\2\0\2\u0170"+
    "\2\0\2\u0170\1\0\3\u0170\6\0\2\u0170\1\7\1\u0172"+
    "\24\0\3\u0170\1\0\1\u0170\2\0\2\u0170\2\0\1\u0170"+
    "\1\u0172\1\7\3\u0170\1\7\5\0\2\u0173\1\0\1\u0173"+
    "\24\0\3\u0173\1\0\1\u0173\2\0\2\u0173\2\0\2\u0173"+
    "\1\0\3\u0173\4\0\2\3\1\u0173\1\u0174\1\0\1\u0173"+
    "\24\3\3\u0173\1\0\1\u0173\2\0\2\u0173\2\0\2\u0173"+
    "\1\0\3\u0173\6\0\2\u0173\1\7\1\u0175\24\0\3\u0173"+
    "\1\0\1\u0173\2\0\2\u0173\2\0\1\u0173\1\u0175\1\7"+
    "\3\u0173\1\7\5\0\2\u0176\1\0\1\u0176\24\0\3\u0176"+
    "\1\0\1\u0176\2\0\2\u0176\2\0\2\u0176\1\0\3\u0176"+
    "\4\0\2\3\1\u0176\1\u0177\1\0\1\u0176\24\3\3\u0176"+
    "\1\0\1\u0176\2\0\2\u0176\2\0\2\u0176\1\0\3\u0176"+
    "\6\0\2\u0176\1\7\1\u0178\24\0\3\u0176\1\0\1\u0176"+
    "\2\0\2\u0176\2\0\1\u0176\1\u0178\1\7\3\u0176\1\7"+
    "\5\0\2\u0179\1\0\1\u0179\24\0\3\u0179\1\0\1\u0179"+
    "\2\0\2\u0179\2\0\2\u0179\1\0\3\u0179\4\0\2\3"+
    "\1\u0179\1\u017a\1\0\1\u0179\24\3\3\u0179\1\0\1\u0179"+
    "\2\0\2\u0179\2\0\2\u0179\1\0\3\u0179\6\0\2\u0179"+
    "\1\7\1\u017b\24\0\3\u0179\1\0\1\u0179\2\0\2\u0179"+
    "\2\0\1\u0179\1\u017b\1\7\3\u0179\1\7\5\0\2\u017c"+
    "\1\0\1\u017c\24\0\3\u017c\1\0\1\u017c\2\0\2\u017c"+
    "\2\0\2\u017c\1\0\3\u017c\4\0\2\3\1\u017c\1\u017d"+
    "\1\0\1\u017c\24\3\3\u017c\1\0\1\u017c\2\0\2\u017c"+
    "\2\0\2\u017c\1\0\3\u017c\6\0\2\u017c\1\7\1\u017e"+
    "\24\0\3\u017c\1\0\1\u017c\2\0\2\u017c\2\0\1\u017c"+
    "\1\u017e\1\7\3\u017c\1\7\5\0\2\u017f\1\0\1\u017f"+
    "\24\0\3\u017f\1\0\1\u017f\2\0\2\u017f\2\0\2\u017f"+
    "\1\0\3\u017f\4\0\2\3\1\u017f\1\u0180\1\0\1\u017f"+
    "\24\3\3\u017f\1\0\1\u017f\2\0\2\u017f\2\0\2\u017f"+
    "\1\0\3\u017f\6\0\2\u017f\1\7\1\u0181\24\0\3\u017f"+
    "\1\0\1\u017f\2\0\2\u017f\2\0\1\u017f\1\u0181\1\7"+
    "\3\u017f\1\7\5\0\2\u0182\1\0\1\u0182\24\0\3\u0182"+
    "\1\0\1\u0182\2\0\2\u0182\2\0\2\u0182\1\0\3\u0182"+
    "\4\0\2\3\1\u0182\1\u0183\1\0\1\u0182\24\3\3\u0182"+
    "\1\0\1\u0182\2\0\2\u0182\2\0\2\u0182\1\0\3\u0182"+
    "\6\0\2\u0182\1\7\1\u0184\24\0\3\u0182\1\0\1\u0182"+
    "\2\0\2\u0182\2\0\1\u0182\1\u0184\1\7\3\u0182\1\7"+
    "\5\0\2\u0185\1\0\1\u0185\24\0\3\u0185\1\0\1\u0185"+
    "\2\0\2\u0185\2\0\2\u0185\1\0\3\u0185\4\0\2\3"+
    "\1\u0185\1\u0186\1\0\1\u0185\24\3\3\u0185\1\0\1\u0185"+
    "\2\0\2\u0185\2\0\2\u0185\1\0\3\u0185\6\0\2\u0185"+
    "\1\7\1\u0187\24\0\3\u0185\1\0\1\u0185\2\0\2\u0185"+
    "\2\0\1\u0185\1\u0187\1\7\3\u0185\1\7\5\0\2\u0188"+
    "\1\0\1\u0188\24\0\3\u0188\1\0\1\u0188\2\0\2\u0188"+
    "\2\0\2\u0188\1\0\3\u0188\4\0\2\3\1\u0188\1\u0189"+
    "\1\0\1\u0188\24\3\3\u0188\1\0\1\u0188\2\0\2\u0188"+
    "\2\0\2\u0188\1\0\3\u0188\6\0\2\u0188\1\7\1\u018a"+
    "\24\0\3\u0188\1\0\1\u0188\2\0\2\u0188\2\0\1\u0188"+
    "\1\u018a\1\7\3\u0188\1\7\5\0\2\u018b\1\0\1\u018b"+
    "\24\0\3\u018b\1\0\1\u018b\2\0\2\u018b\2\0\2\u018b"+
    "\1\0\3\u018b\4\0\2\3\1\u018b\1\u018c\1\0\1\u018b"+
    "\24\3\3\u018b\1\0\1\u018b\2\0\2\u018b\2\0\2\u018b"+
    "\1\0\3\u018b\6\0\2\u018b\1\7\1\u018d\24\0\3\u018b"+
    "\1\0\1\u018b\2\0\2\u018b\2\0\1\u018b\1\u018d\1\7"+
    "\3\u018b\1\7\5\0\2\u018e\1\0\1\u018e\24\0\3\u018e"+
    "\1\0\1\u018e\2\0\2\u018e\2\0\2\u018e\1\0\3\u018e"+
    "\4\0\2\3\1\u018e\1\u018f\1\0\1\u018e\24\3\3\u018e"+
    "\1\0\1\u018e\2\0\2\u018e\2\0\2\u018e\1\0\3\u018e"+
    "\6\0\2\u018e\1\7\1\u0190\24\0\3\u018e\1\0\1\u018e"+
    "\2\0\2\u018e\2\0\1\u018e\1\u0190\1\7\3\u018e\1\7"+
    "\5\0\2\u0191\1\0\1\u0191\24\0\3\u0191\1\0\1\u0191"+
    "\2\0\2\u0191\2\0\2\u0191\1\0\3\u0191\4\0\2\3"+
    "\1\u0191\1\u0192\1\0\1\u0191\24\3\3\u0191\1\0\1\u0191"+
    "\2\0\2\u0191\2\0\2\u0191\1\0\3\u0191\6\0\2\u0191"+
    "\1\7\1\u0193\24\0\3\u0191\1\0\1\u0191\2\0\2\u0191"+
    "\2\0\1\u0191\1\u0193\1\7\3\u0191\1\7\5\0\2\u0194"+
    "\1\0\1\u0194\24\0\3\u0194\1\0\1\u0194\2\0\2\u0194"+
    "\2\0\2\u0194\1\0\3\u0194\4\0\2\3\1\u0194\1\u0195"+
    "\1\0\1\u0194\24\3\3\u0194\1\0\1\u0194\2\0\2\u0194"+
    "\2\0\2\u0194\1\0\3\u0194\6\0\2\u0194\1\7\1\u0196"+
    "\24\0\3\u0194\1\0\1\u0194\2\0\2\u0194\2\0\1\u0194"+
    "\1\u0196\1\7\3\u0194\1\7\5\0\2\2\1\0\1\2"+
    "\24\0\3\2\1\0\1\2\2\0\2\2\2\0\2\2"+
    "\1\0\3\2\4\0\2\3\1\2\1\3\1\0\1\2"+
    "\24\3\3\2\1\0\1\2\2\0\2\2\2\0\2\2"+
    "\1\0\3\2\6\0\2\2\2\7\24\0\3\2\1\0"+
    "\1\2\2\0\2\2\2\0\1\2\2\7\3\2\1\7"+
    "\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18189];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\25\1\1\11\1\1\2\11\2\1\2\11"+
    "\6\1\1\0\1\1\1\0\31\1\2\0\2\1\2\0"+
    "\26\1\1\0\1\1\1\11\14\1\1\0\12\1\1\11"+
    "\u011e\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[406];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    public int linea;
    public int columna;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 136) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 21: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Decremento;
          }
        case 27: break;
        case 10: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Operador_Division;
          }
        case 28: break;
        case 26: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Cadena;
          }
        case 29: break;
        case 25: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Comentario;
          }
        case 30: break;
        case 4: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Simbolo;
          }
        case 31: break;
        case 23: 
          { lexeme=yytext(); return Operador_Logico;
          }
        case 32: break;
        case 9: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Operador_Multiplicacion;
          }
        case 33: break;
        case 8: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Operador_Resta;
          }
        case 34: break;
        case 1: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Error;
          }
        case 35: break;
        case 6: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Operador_Asignacion;
          }
        case 36: break;
        case 7: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Operador_Suma;
          }
        case 37: break;
        case 12: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return LLave_Cierre;
          }
        case 38: break;
        case 17: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Terminador;
          }
        case 39: break;
        case 13: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Parentesis_Apertura;
          }
        case 40: break;
        case 19: 
          { linea=yyline; columna=yycolumn; lexeme=yytext();return Palabra_Reservada;
          }
        case 41: break;
        case 24: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Decimal_Real;
          }
        case 42: break;
        case 18: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Comparador;
          }
        case 43: break;
        case 22: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Coma;
          }
        case 44: break;
        case 14: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Parentesis_Cierre;
          }
        case 45: break;
        case 11: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return LLave_Apertura;
          }
        case 46: break;
        case 20: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Incremento;
          }
        case 47: break;
        case 3: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Entero_Real;
          }
        case 48: break;
        case 2: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Identificador;
          }
        case 49: break;
        case 16: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Corchete_Cierre;
          }
        case 50: break;
        case 15: 
          { linea=yyline; columna=yycolumn; lexeme=yytext(); return Corchete_Apertura;
          }
        case 51: break;
        case 5: 
          { /*Ignore*/
          }
        case 52: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
