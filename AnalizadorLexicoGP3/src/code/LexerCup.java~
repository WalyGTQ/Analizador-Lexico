/* The following code was generated by JFlex 1.4.3 on 28/5/22 2:45 */

//area de Codigo de Usuario

package code;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 28/5/22 2:45 from the specification file
 * <tt>C:/Users/walyn/OneDrive/Documentos/NetBeansProjects/AnalizadorLexicoGP3/src/code/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 46, 46,  0,  0,  5,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     6, 51, 50,  4,  4, 36, 52, 49, 39, 40, 34, 32, 44, 33, 45, 35, 
     3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  4, 43, 48, 31, 47, 53, 
     0,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 41,  0, 42, 51,  2, 
     0, 10,  7, 12, 20,  9, 21, 27, 15, 18,  2, 11, 22, 29, 17, 16, 
    25,  2,  8, 13, 14, 19, 26, 24, 28, 23, 30, 37,  1, 38,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  2,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\5\1\6\20\3"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\2\24\5\1\1\2"+
    "\1\4\1\10\1\11\1\25\1\24\1\1\1\0\26\3"+
    "\1\26\1\27\2\3\1\26\14\3\1\24\1\4\1\30"+
    "\1\31\2\0\1\32\4\0\1\25\2\0\1\1\1\4"+
    "\1\30\1\33\24\3\1\26\6\3\1\34\14\3\1\35"+
    "\3\3\1\0\1\6\1\36\1\0\1\37\3\3\1\40"+
    "\10\3\1\41\3\3\1\42\11\3\1\0\7\3\1\26"+
    "\4\3\1\34\1\3\1\43\1\3\1\6\1\3\1\44"+
    "\13\3\1\45\3\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[219];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\154\0\u0144"+
    "\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4"+
    "\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4"+
    "\0\u04da\0\u0510\0\u0546\0\u057c\0\u05b2\0\u0510\0\154\0\154"+
    "\0\154\0\154\0\154\0\154\0\154\0\u05e8\0\u061e\0\u0654"+
    "\0\u068a\0\u0510\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798\0\u07ce"+
    "\0\u0510\0\154\0\u0804\0\u083a\0\u0870\0\u08a6\0\u08dc\0\u0912"+
    "\0\u0948\0\u097e\0\u09b4\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2"+
    "\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72"+
    "\0\u0ca8\0\u0cde\0\u0d14\0\330\0\u0d4a\0\u0d80\0\u0db6\0\u0dec"+
    "\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c"+
    "\0\u0fd2\0\u1008\0\u103e\0\u0510\0\u1074\0\154\0\u0510\0\u10aa"+
    "\0\u10e0\0\154\0\u1116\0\u0510\0\u114c\0\u1182\0\u0798\0\u11b8"+
    "\0\u11ee\0\u1224\0\u125a\0\u11ee\0\u083a\0\u1290\0\u12c6\0\u12fc"+
    "\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac"+
    "\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c"+
    "\0\u1692\0\330\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6"+
    "\0\330\0\u180c\0\u1842\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950"+
    "\0\u1986\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\330\0\u1a94\0\u1aca"+
    "\0\u1b00\0\u1b36\0\u10e0\0\154\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e"+
    "\0\u1c44\0\330\0\u1c7a\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88"+
    "\0\u1dbe\0\u1df4\0\330\0\u1e2a\0\u1e60\0\u1e96\0\330\0\u1ecc"+
    "\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda\0\u2010\0\u2046\0\u207c"+
    "\0\u20b2\0\u20e8\0\u211e\0\u2154\0\u218a\0\u21c0\0\u21f6\0\u222c"+
    "\0\u2262\0\u2298\0\u22ce\0\u2304\0\u233a\0\u2370\0\u23a6\0\330"+
    "\0\u23dc\0\154\0\u2412\0\330\0\u2448\0\u247e\0\u24b4\0\u24ea"+
    "\0\u2520\0\u2556\0\u258c\0\u25c2\0\u25f8\0\u262e\0\u2664\0\330"+
    "\0\u269a\0\u26d0\0\u2706";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[219];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\2\10\1\11\1\12"+
    "\1\13\1\14\1\5\1\15\1\16\1\17\2\5\1\20"+
    "\1\21\1\5\1\22\1\23\1\24\1\25\1\26\1\5"+
    "\1\27\1\30\3\5\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\10\1\7\1\10\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\3\1\55\1\5\1\56\1\7\2\10"+
    "\1\11\1\12\1\13\1\14\1\5\1\15\1\16\1\17"+
    "\2\5\1\20\1\21\1\5\1\22\1\23\1\24\1\25"+
    "\1\26\1\5\1\27\1\30\3\5\1\31\1\57\1\60"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\10\1\7\1\10\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\67\0\1\61\35\0\1\62"+
    "\30\0\2\5\3\0\30\5\31\0\1\63\1\6\3\0"+
    "\30\63\16\0\1\64\15\0\2\10\45\0\1\10\1\0"+
    "\1\10\11\0\2\5\3\0\1\5\1\65\7\5\1\66"+
    "\6\5\1\67\7\5\31\0\2\5\3\0\2\5\1\70"+
    "\25\5\31\0\2\5\3\0\12\5\1\71\4\5\1\72"+
    "\5\5\1\73\2\5\31\0\2\5\3\0\1\74\27\5"+
    "\31\0\2\5\3\0\3\5\1\75\4\5\1\76\1\77"+
    "\5\5\1\100\10\5\31\0\2\5\3\0\10\5\1\101"+
    "\3\5\1\102\3\5\1\103\1\104\6\5\31\0\2\5"+
    "\3\0\1\5\1\105\6\5\1\106\7\5\1\107\7\5"+
    "\31\0\2\5\3\0\2\5\1\110\1\111\10\5\1\112"+
    "\13\5\31\0\2\5\3\0\12\5\1\113\3\5\1\114"+
    "\7\5\1\115\1\5\31\0\2\5\3\0\2\5\1\116"+
    "\6\5\1\117\16\5\31\0\2\5\3\0\3\5\1\120"+
    "\5\5\1\121\1\5\1\122\1\123\2\5\1\124\10\5"+
    "\31\0\2\5\3\0\11\5\1\125\16\5\31\0\2\5"+
    "\3\0\13\5\1\126\14\5\31\0\2\5\3\0\10\5"+
    "\1\127\2\5\1\130\14\5\31\0\2\5\3\0\3\5"+
    "\1\131\5\5\1\132\16\5\31\0\2\5\3\0\11\5"+
    "\1\133\16\5\66\0\1\134\65\0\1\62\31\0\1\135"+
    "\33\0\1\62\1\0\1\136\63\0\1\62\2\0\1\137"+
    "\65\0\1\140\1\141\10\0\1\142\50\0\1\62\17\0"+
    "\1\143\45\0\1\62\20\0\1\144\6\0\4\145\1\0"+
    "\34\145\1\0\13\145\1\0\2\145\6\0\4\146\1\0"+
    "\34\146\1\0\13\146\1\0\2\146\44\0\1\62\24\0"+
    "\1\61\66\0\1\144\1\0\1\147\1\0\1\150\33\0"+
    "\1\62\2\151\26\0\1\63\1\56\3\0\2\63\1\152"+
    "\25\63\16\0\1\64\11\0\1\151\1\0\1\150\33\0"+
    "\1\62\2\151\25\0\1\151\1\0\1\153\33\0\1\62"+
    "\1\151\1\154\26\0\1\63\4\0\30\63\32\0\1\155"+
    "\64\0\2\5\3\0\2\5\1\156\25\5\31\0\2\5"+
    "\3\0\11\5\1\157\16\5\31\0\2\5\3\0\7\5"+
    "\1\160\20\5\31\0\2\5\3\0\7\5\1\161\20\5"+
    "\31\0\2\5\3\0\14\5\1\162\13\5\31\0\2\5"+
    "\3\0\6\5\1\163\21\5\31\0\2\5\3\0\7\5"+
    "\1\164\12\5\1\165\5\5\31\0\2\5\3\0\6\5"+
    "\1\166\21\5\31\0\2\5\3\0\6\5\1\167\1\170"+
    "\20\5\31\0\2\5\3\0\3\5\1\171\24\5\31\0"+
    "\2\5\3\0\12\5\1\172\15\5\31\0\2\5\3\0"+
    "\3\5\1\173\24\5\31\0\2\5\3\0\11\5\1\174"+
    "\16\5\31\0\2\5\3\0\22\5\1\175\5\5\31\0"+
    "\2\5\3\0\12\5\1\176\15\5\31\0\2\5\3\0"+
    "\13\5\1\177\14\5\31\0\2\5\3\0\3\5\1\200"+
    "\10\5\1\201\3\5\1\202\7\5\31\0\2\5\3\0"+
    "\1\5\1\203\11\5\1\204\14\5\31\0\2\5\3\0"+
    "\22\5\1\205\5\5\31\0\2\5\3\0\21\5\1\202"+
    "\6\5\31\0\2\5\3\0\7\5\1\206\20\5\31\0"+
    "\2\5\3\0\17\5\1\207\10\5\31\0\2\5\3\0"+
    "\6\5\1\210\1\211\20\5\31\0\2\5\3\0\22\5"+
    "\1\165\5\5\31\0\2\5\3\0\1\212\15\5\1\213"+
    "\1\214\10\5\31\0\2\5\3\0\14\5\1\215\13\5"+
    "\31\0\2\5\3\0\17\5\1\216\10\5\31\0\2\5"+
    "\3\0\1\5\1\202\26\5\31\0\2\5\3\0\12\5"+
    "\1\217\15\5\31\0\2\5\3\0\12\5\1\220\15\5"+
    "\31\0\2\5\3\0\11\5\1\221\16\5\31\0\2\5"+
    "\3\0\12\5\1\222\15\5\31\0\2\5\3\0\2\5"+
    "\1\223\25\5\31\0\2\5\3\0\13\5\1\224\14\5"+
    "\31\0\2\5\3\0\7\5\1\225\20\5\31\0\2\5"+
    "\3\0\1\5\1\226\26\5\31\0\2\5\3\0\13\5"+
    "\1\227\3\5\1\230\10\5\31\0\2\5\3\0\7\5"+
    "\1\231\20\5\32\0\1\135\51\0\1\64\11\0\4\232"+
    "\1\0\34\232\1\0\16\232\6\0\4\233\1\0\34\233"+
    "\1\0\13\233\1\0\2\233\44\0\1\62\17\0\1\144"+
    "\7\0\4\145\1\0\34\145\1\0\13\145\1\0\2\145"+
    "\1\234\5\0\4\146\1\0\34\146\1\0\13\146\1\0"+
    "\2\146\1\0\1\234\6\0\1\150\5\0\1\235\55\0"+
    "\1\151\1\0\1\150\34\0\2\151\25\0\1\235\1\63"+
    "\1\236\3\0\30\63\1\0\2\235\27\0\1\153\5\0"+
    "\1\235\43\0\1\64\12\0\2\5\3\0\3\5\1\237"+
    "\24\5\31\0\2\5\3\0\17\5\1\240\10\5\31\0"+
    "\2\5\3\0\2\5\1\211\25\5\31\0\2\5\3\0"+
    "\14\5\1\241\13\5\31\0\2\5\3\0\26\5\1\202"+
    "\1\5\31\0\2\5\3\0\2\5\1\242\25\5\31\0"+
    "\2\5\3\0\2\5\1\243\25\5\31\0\2\5\3\0"+
    "\11\5\1\244\16\5\31\0\2\5\3\0\7\5\1\245"+
    "\20\5\31\0\2\5\3\0\2\5\1\202\25\5\31\0"+
    "\2\5\3\0\5\5\1\225\22\5\31\0\2\5\3\0"+
    "\1\5\1\211\26\5\31\0\2\5\3\0\6\5\1\246"+
    "\1\247\20\5\31\0\2\5\3\0\6\5\1\204\21\5"+
    "\31\0\2\5\3\0\1\5\1\250\26\5\31\0\2\5"+
    "\3\0\2\5\1\121\25\5\31\0\2\5\3\0\5\5"+
    "\1\251\22\5\31\0\2\5\3\0\7\5\1\170\20\5"+
    "\31\0\2\5\3\0\12\5\1\252\15\5\31\0\2\5"+
    "\3\0\2\5\1\253\25\5\31\0\2\5\3\0\11\5"+
    "\1\254\16\5\31\0\2\5\3\0\6\5\1\202\21\5"+
    "\31\0\2\5\3\0\2\5\1\255\25\5\31\0\2\5"+
    "\3\0\13\5\1\256\14\5\31\0\2\5\3\0\17\5"+
    "\1\257\10\5\31\0\2\5\3\0\7\5\1\260\20\5"+
    "\31\0\2\5\3\0\14\5\1\261\13\5\31\0\2\5"+
    "\3\0\3\5\1\262\24\5\31\0\2\5\3\0\2\5"+
    "\1\263\25\5\31\0\2\5\3\0\1\264\27\5\31\0"+
    "\2\5\3\0\6\5\1\201\21\5\31\0\2\5\3\0"+
    "\3\5\1\265\24\5\31\0\2\5\3\0\5\5\1\266"+
    "\22\5\31\0\2\5\3\0\3\5\1\250\24\5\31\0"+
    "\2\5\3\0\24\5\1\211\3\5\31\0\2\5\3\0"+
    "\17\5\1\227\10\5\31\0\2\5\3\0\17\5\1\267"+
    "\10\5\31\0\2\5\3\0\10\5\1\202\17\5\31\0"+
    "\2\5\3\0\15\5\1\202\12\5\31\0\2\5\3\0"+
    "\3\5\1\270\24\5\31\0\2\5\3\0\11\5\1\211"+
    "\16\5\30\0\4\232\1\0\34\232\1\271\16\232\6\0"+
    "\1\235\1\0\1\236\34\0\2\235\27\0\1\236\64\0"+
    "\2\5\3\0\4\5\1\202\23\5\31\0\2\5\3\0"+
    "\2\5\1\272\25\5\31\0\2\5\3\0\1\5\1\273"+
    "\26\5\31\0\2\5\3\0\12\5\1\274\15\5\31\0"+
    "\2\5\3\0\1\5\1\246\26\5\31\0\2\5\3\0"+
    "\1\5\1\275\26\5\31\0\2\5\3\0\7\5\1\202"+
    "\20\5\31\0\2\5\3\0\13\5\1\276\14\5\31\0"+
    "\2\5\3\0\7\5\1\211\20\5\31\0\2\5\3\0"+
    "\10\5\1\277\17\5\31\0\2\5\3\0\6\5\1\300"+
    "\21\5\31\0\2\5\3\0\21\5\1\301\6\5\31\0"+
    "\2\5\3\0\11\5\1\302\16\5\31\0\2\5\3\0"+
    "\23\5\1\160\4\5\31\0\2\5\3\0\3\5\1\303"+
    "\24\5\31\0\2\5\3\0\24\5\1\304\3\5\31\0"+
    "\2\5\3\0\14\5\1\305\13\5\31\0\2\5\3\0"+
    "\7\5\1\167\20\5\31\0\2\5\3\0\17\5\1\160"+
    "\10\5\31\0\2\5\3\0\17\5\1\306\10\5\31\0"+
    "\2\5\3\0\7\5\1\307\20\5\31\0\2\5\3\0"+
    "\2\5\1\310\25\5\31\0\2\5\3\0\7\5\1\311"+
    "\20\5\72\0\1\312\24\0\2\5\3\0\3\5\1\313"+
    "\24\5\31\0\2\5\3\0\12\5\1\314\15\5\31\0"+
    "\2\5\3\0\15\5\1\204\12\5\31\0\2\5\3\0"+
    "\3\5\1\315\24\5\31\0\2\5\3\0\12\5\1\316"+
    "\15\5\31\0\2\5\3\0\1\5\1\317\26\5\31\0"+
    "\2\5\3\0\13\5\1\320\14\5\31\0\2\5\3\0"+
    "\6\5\1\211\21\5\31\0\2\5\3\0\16\5\1\202"+
    "\11\5\31\0\2\5\3\0\12\5\1\321\15\5\31\0"+
    "\2\5\3\0\24\5\1\175\3\5\31\0\2\5\3\0"+
    "\17\5\1\246\10\5\31\0\2\5\3\0\17\5\1\322"+
    "\10\5\31\0\2\5\3\0\13\5\1\323\14\5\31\0"+
    "\2\5\3\0\13\5\1\264\14\5\31\0\2\5\3\0"+
    "\12\5\1\211\15\5\31\0\2\5\3\0\5\5\1\250"+
    "\22\5\31\0\2\5\3\0\14\5\1\167\13\5\31\0"+
    "\2\5\3\0\11\5\1\324\16\5\31\0\2\5\3\0"+
    "\2\5\1\325\25\5\31\0\2\5\3\0\5\5\1\205"+
    "\22\5\31\0\2\5\3\0\20\5\1\202\7\5\31\0"+
    "\2\5\3\0\11\5\1\326\16\5\31\0\2\5\3\0"+
    "\12\5\1\327\15\5\31\0\2\5\3\0\12\5\1\250"+
    "\15\5\31\0\2\5\3\0\12\5\1\330\15\5\31\0"+
    "\2\5\3\0\13\5\1\331\14\5\31\0\2\5\3\0"+
    "\27\5\1\332\31\0\2\5\3\0\2\5\1\333\25\5"+
    "\31\0\2\5\3\0\15\5\1\211\12\5\27\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10044];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\3\1\1\11\27\1\7\11\14\1\1\11"+
    "\1\1\1\0\51\1\1\11\1\1\2\0\1\11\4\0"+
    "\1\1\2\0\60\1\1\0\1\1\1\11\1\0\33\1"+
    "\1\0\20\1\1\11\21\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[219];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
       return new Symbol(type, yyline, yycolumn, value);}

    private Symbol symbol(int type){
       return new Symbol(type, yyline,yycolumn);}
     



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      if (zzMarkedPosL > zzStartRead) {
        switch (zzBufferL[zzMarkedPosL-1]) {
        case '\n':
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          zzAtBOL = true;
          break;
        case '\r': 
          if (zzMarkedPosL < zzEndReadL)
            zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          else if (zzAtEOF)
            zzAtBOL = false;
          else {
            boolean eof = zzRefill();
            zzMarkedPosL = zzMarkedPos;
            zzEndReadL = zzEndRead;
            zzBufferL = zzBuffer;
            if (eof) 
              zzAtBOL = false;
            else 
              zzAtBOL = zzBufferL[zzMarkedPosL] != '\n';
          }
          break;
        default:
          zzAtBOL = false;
        }
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      if (zzAtBOL)
        zzState = ZZ_LEXSTATE[zzLexicalState+1];
      else
        zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 10: 
          { return new Symbol(sym.Operador_Multiplicacion, yychar, yyline, yytext());
          }
        case 38: break;
        case 13: 
          { return new Symbol(sym.LLave_Apertura, yychar, yyline, yytext());
          }
        case 39: break;
        case 15: 
          { return new Symbol(sym.Parentesis_Apertura, yychar, yyline, yytext());
          }
        case 40: break;
        case 30: 
          { return new Symbol(sym.Cadena, yychar, yyline, yytext());
          }
        case 41: break;
        case 20: 
          { return new Symbol(sym.Comparador, yychar, yyline, yytext());
          }
        case 42: break;
        case 32: 
          { return new Symbol(sym.Else, yychar, yyline, yytext());
          }
        case 43: break;
        case 7: 
          { return new Symbol(sym.Operador_Asignacion, yychar, yyline, yytext());
          }
        case 44: break;
        case 34: 
          { return new Symbol(sym.Vacio, yychar, yyline, yytext());
          }
        case 45: break;
        case 5: 
          { return new Symbol(sym.Simbolo, yychar, yyline, yytext());
          }
        case 46: break;
        case 24: 
          { return new Symbol(sym.Decremento, yychar, yyline, yytext());
          }
        case 47: break;
        case 27: 
          { return new Symbol(sym.Decimal_Real, yychar, yyline, yytext());
          }
        case 48: break;
        case 19: 
          { return new Symbol(sym.Terminador, yychar, yyline, yytext());
          }
        case 49: break;
        case 2: 
          { return new Symbol(sym.Letra, yychar, yyline, yytext());
          }
        case 50: break;
        case 37: 
          { return new Symbol(sym.Function, yychar, yyline, yytext());
          }
        case 51: break;
        case 11: 
          { return new Symbol(sym.Operador_Division, yychar, yyline, yytext());
          }
        case 52: break;
        case 9: 
          { return new Symbol(sym.Operador_Resta, yychar, yyline, yytext());
          }
        case 53: break;
        case 29: 
          { return new Symbol(sym.Var, yychar, yyline, yytext());
          }
        case 54: break;
        case 36: 
          { return new Symbol(sym.Return, yychar, yyline, yytext());
          }
        case 55: break;
        case 8: 
          { return new Symbol(sym.Operador_Suma, yychar, yyline, yytext());
          }
        case 56: break;
        case 23: 
          { return new Symbol(sym.If, yychar, yyline, yytext());
          }
        case 57: break;
        case 14: 
          { return new Symbol(sym.LLave_Cierre, yychar, yyline, yytext());
          }
        case 58: break;
        case 18: 
          { return new Symbol(sym.Corchete_Cierre, yychar, yyline, yytext());
          }
        case 59: break;
        case 12: 
          { return new Symbol(sym.Operador_Residuo, yychar, yyline, yytext());
          }
        case 60: break;
        case 16: 
          { return new Symbol(sym.Parentesis_Cierre, yychar, yyline, yytext());
          }
        case 61: break;
        case 28: 
          { return new Symbol(sym.ClaveReservada, yychar, yyline, yytext());
          }
        case 62: break;
        case 4: 
          { return new Symbol(sym.Entero_Real, yychar, yyline, yytext());
          }
        case 63: break;
        case 22: 
          { return new Symbol(sym.Palabra_Reservada, yychar, yyline, yytext());
          }
        case 64: break;
        case 31: 
          { return new Symbol(sym.NotacionCientifica, yychar, yyline, yytext());
          }
        case 65: break;
        case 21: 
          { return new Symbol(sym.Operador_Logico, yychar, yyline, yytext());
          }
        case 66: break;
        case 1: 
          { return new Symbol(sym.Error, yychar, yyline, yytext());
          }
        case 67: break;
        case 35: 
          { return new Symbol(sym.While, yychar, yyline, yytext());
          }
        case 68: break;
        case 17: 
          { return new Symbol(sym.Corchete_Apertura, yychar, yyline, yytext());
          }
        case 69: break;
        case 33: 
          { return new Symbol(sym.Boleano, yychar, yyline, yytext());
          }
        case 70: break;
        case 6: 
          { /*Ignore*/
          }
        case 71: break;
        case 26: 
          { return new Symbol(sym.Coma, yychar, yyline, yytext());
          }
        case 72: break;
        case 3: 
          { return new Symbol(sym.Identificador, yychar, yyline, yytext());
          }
        case 73: break;
        case 25: 
          { return new Symbol(sym.Operador_Potencia, yychar, yyline, yytext());
          }
        case 74: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
